{"ast":null,"code":"import { API_ROUTES } from 'src/apis-routes';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../Tokens/token.service\";\nclass AutorizationService {\n  constructor(Http, tokenservice) {\n    this.Http = Http;\n    this.tokenservice = tokenservice;\n    this.apiUrl = `${API_ROUTES.AccountUrl}`;\n  }\n  login(credentials) {\n    return this.Http.post(`${this.apiUrl}/authenticate`, credentials).pipe();\n  }\n  getProfile(token) {\n    return this.Http.get(`${this.apiUrl}/profile`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n}\nAutorizationService.ɵfac = function AutorizationService_Factory(t) {\n  return new (t || AutorizationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokenService));\n};\nAutorizationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AutorizationService,\n  factory: AutorizationService.ɵfac,\n  providedIn: 'root'\n});\nexport { AutorizationService };","map":{"version":3,"names":["API_ROUTES","AutorizationService","constructor","Http","tokenservice","apiUrl","AccountUrl","login","credentials","post","pipe","getProfile","token","get","headers","Authorization","i0","ɵɵinject","i1","HttpClient","i2","TokenService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Asus\\source\\repos\\Frontend_Proyect_Personal\\ESTREMOR\\src\\app\\services\\Authorization\\autorization.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { API_ROUTES } from 'src/apis-routes';\nimport { CredentialModel } from 'src/app/Models/Authenticated/CredentilsModel';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ResponseModel } from 'src/app/Models/Responses/ResponseModel';\nimport { TokenService } from '../Tokens/token.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AutorizationService {\n  private apiUrl = `${API_ROUTES.AccountUrl}`;\n  constructor(\n    private Http:HttpClient\n    private tokenservice : TokenService\n  ) { }\n  login(credentials:CredentialModel):Observable<ResponseModel>{\n    return this.Http.post<ResponseModel>(`${this.apiUrl}/authenticate`,credentials)\n          .pipe(\n\n          );\n  }\n  getProfile(token:string):Observable<ResponseModel>{\n    return this.Http.get<ResponseModel>(`${this.apiUrl}/profile`,{\n      headers:{\n        Authorization: `Bearer ${token}`\n      }\n    })\n  }\n}\n"],"mappings":"AACA,SAASA,UAAU,QAAQ,iBAAiB;;;;AAM5C,MAGaC,mBAAmB;EAE9BC,YACUC,IAAe,EACfC,YAA2B;IAD3B,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,YAAY,GAAZA,YAAY;IAHd,KAAAC,MAAM,GAAG,GAAGL,UAAU,CAACM,UAAU,EAAE;EAIvC;EACJC,KAAKA,CAACC,WAA2B;IAC/B,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAgB,GAAG,IAAI,CAACJ,MAAM,eAAe,EAACG,WAAW,CAAC,CACxEE,IAAI,EAEJ;EACT;EACAC,UAAUA,CAACC,KAAY;IACrB,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAgB,GAAG,IAAI,CAACR,MAAM,UAAU,EAAC;MAC3DS,OAAO,EAAC;QACNC,aAAa,EAAE,UAAUH,KAAK;;KAEjC,CAAC;EACJ;;AAlBWX,mBAAmB,C;mBAAnBA,mBAAmB,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA;AAAA;AAAnBpB,mBAAmB,C;SAAnBA,mBAAmB;EAAAqB,OAAA,EAAnBrB,mBAAmB,CAAAsB,IAAA;EAAAC,UAAA,EAFlB;AAAM;SAEPvB,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}