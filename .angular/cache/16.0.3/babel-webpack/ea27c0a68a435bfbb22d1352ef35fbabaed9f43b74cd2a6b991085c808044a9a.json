{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/Tokens/token.service\";\nclass TokenInterceptor {\n  constructor(tokenService) {\n    this.tokenService = tokenService;\n  }\n  intercept(request, next) {\n    request = this.addToken(request);\n    return next.handle(request);\n  }\n  addToken(request) {\n    const token = this.tokenService.getToken();\n    if (token) {\n      const authRequest = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${token}`)\n      });\n      return authRequest;\n    }\n    return request;\n  }\n}\nTokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n  return new (t || TokenInterceptor)(i0.ɵɵinject(i1.TokenService));\n};\nTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenInterceptor,\n  factory: TokenInterceptor.ɵfac\n});\nexport { TokenInterceptor };","map":{"version":3,"names":["TokenInterceptor","constructor","tokenService","intercept","request","next","addToken","handle","token","getToken","authRequest","clone","headers","set","i0","ɵɵinject","i1","TokenService","factory","ɵfac"],"sources":["C:\\Users\\Asus\\source\\repos\\Frontend_Proyect_Personal\\ESTREMOR\\src\\app\\interceptors\\Token\\token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TokenService } from 'src/app/services/Tokens/token.service';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n\n  constructor(\n    private tokenService : TokenService\n  ) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    request = this.addToken(request);\n    return next.handle(request);\n  }\n\n  private addToken(request: HttpRequest<unknown>){\n    const token = this.tokenService.getToken();\n    if(token){\n      const authRequest = request.clone({\n        headers:request.headers.set('Authorization', `Bearer ${token}`)\n      })\n      return authRequest;\n    }\n    return request;\n  }\n}\n"],"mappings":";;AAUA,MACaA,gBAAgB;EAE3BC,YACUC,YAA2B;IAA3B,KAAAA,YAAY,GAAZA,YAAY;EACnB;EAEHC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxDD,OAAO,GAAG,IAAI,CAACE,QAAQ,CAACF,OAAO,CAAC;IAChC,OAAOC,IAAI,CAACE,MAAM,CAACH,OAAO,CAAC;EAC7B;EAEQE,QAAQA,CAACF,OAA6B;IAC5C,MAAMI,KAAK,GAAG,IAAI,CAACN,YAAY,CAACO,QAAQ,EAAE;IAC1C,IAAGD,KAAK,EAAC;MACP,MAAME,WAAW,GAAGN,OAAO,CAACO,KAAK,CAAC;QAChCC,OAAO,EAACR,OAAO,CAACQ,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUL,KAAK,EAAE;OAC/D,CAAC;MACF,OAAOE,WAAW;;IAEpB,OAAON,OAAO;EAChB;;AApBWJ,gBAAgB,C;mBAAhBA,gBAAgB,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA;AAAA;AAAhBjB,gBAAgB,C;SAAhBA,gBAAgB;EAAAkB,OAAA,EAAhBlB,gBAAgB,CAAAmB;AAAA;SAAhBnB,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}