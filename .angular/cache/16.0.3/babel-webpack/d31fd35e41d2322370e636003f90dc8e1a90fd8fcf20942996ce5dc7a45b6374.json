{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, InjectionToken, Optional, SkipSelf, Inject, Injectable, inject, Injector, ViewContainerRef, EventEmitter, NgZone, ElementRef, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport { Overlay, OverlayConfig, STANDARD_DROPDOWN_BELOW_POSITIONS, STANDARD_DROPDOWN_ADJACENT_POSITIONS, OverlayModule } from '@angular/cdk/overlay';\nimport { UP_ARROW, hasModifierKey, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, TAB, ESCAPE } from '@angular/cdk/keycodes';\nimport { startWith, debounceTime, distinctUntilChanged, filter, takeUntil, mergeMap, mapTo, mergeAll, switchMap, skip } from 'rxjs/operators';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { Subject, merge, fromEvent, defer, partition } from 'rxjs';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { InputModalityDetector, FocusKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { _getEventTarget } from '@angular/cdk/platform';\n\n/**\n * A grouping container for `CdkMenuItemRadio` instances, similar to a `role=\"radiogroup\"` element.\n */\nclass CdkMenuGroup {}\nCdkMenuGroup.ɵfac = function CdkMenuGroup_Factory(t) {\n  return new (t || CdkMenuGroup)();\n};\nCdkMenuGroup.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkMenuGroup,\n  selectors: [[\"\", \"cdkMenuGroup\", \"\"]],\n  hostAttrs: [\"role\", \"group\", 1, \"cdk-menu-group\"],\n  exportAs: [\"cdkMenuGroup\"],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: UniqueSelectionDispatcher,\n    useClass: UniqueSelectionDispatcher\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkMenuGroup, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkMenuGroup]',\n      exportAs: 'cdkMenuGroup',\n      standalone: true,\n      host: {\n        'role': 'group',\n        'class': 'cdk-menu-group'\n      },\n      providers: [{\n        provide: UniqueSelectionDispatcher,\n        useClass: UniqueSelectionDispatcher\n      }]\n    }]\n  }], null, null);\n})();\n\n/** Injection token used to return classes implementing the Menu interface */\nconst CDK_MENU = new InjectionToken('cdk-menu');\n\n/** Injection token used for an implementation of MenuStack. */\nconst MENU_STACK = new InjectionToken('cdk-menu-stack');\n/** Provider that provides the parent menu stack, or a new menu stack if there is no parent one. */\nconst PARENT_OR_NEW_MENU_STACK_PROVIDER = {\n  provide: MENU_STACK,\n  deps: [[new Optional(), new SkipSelf(), new Inject(MENU_STACK)]],\n  useFactory: parentMenuStack => parentMenuStack || new MenuStack()\n};\n/** Provider that provides the parent menu stack, or a new inline menu stack if there is no parent one. */\nconst PARENT_OR_NEW_INLINE_MENU_STACK_PROVIDER = orientation => ({\n  provide: MENU_STACK,\n  deps: [[new Optional(), new SkipSelf(), new Inject(MENU_STACK)]],\n  useFactory: parentMenuStack => parentMenuStack || MenuStack.inline(orientation)\n});\n/** The next available menu stack ID. */\nlet nextId$2 = 0;\n/**\n * MenuStack allows subscribers to listen for close events (when a MenuStackItem is popped off\n * of the stack) in order to perform closing actions. Upon the MenuStack being empty it emits\n * from the `empty` observable specifying the next focus action which the listener should perform\n * as requested by the closer.\n */\nclass MenuStack {\n  constructor() {\n    /** The ID of this menu stack. */\n    this.id = `${nextId$2++}`;\n    /** All MenuStackItems tracked by this MenuStack. */\n    this._elements = [];\n    /** Emits the element which was popped off of the stack when requested by a closer. */\n    this._close = new Subject();\n    /** Emits once the MenuStack has become empty after popping off elements. */\n    this._empty = new Subject();\n    /** Emits whether any menu in the menu stack has focus. */\n    this._hasFocus = new Subject();\n    /** Observable which emits the MenuStackItem which has been requested to close. */\n    this.closed = this._close;\n    /** Observable which emits whether any menu in the menu stack has focus. */\n    this.hasFocus = this._hasFocus.pipe(startWith(false), debounceTime(0), distinctUntilChanged());\n    /**\n     * Observable which emits when the MenuStack is empty after popping off the last element. It\n     * emits a FocusNext event which specifies the action the closer has requested the listener\n     * perform.\n     */\n    this.emptied = this._empty;\n    /**\n     * Whether the inline menu associated with this menu stack is vertical or horizontal.\n     * `null` indicates there is no inline menu associated with this menu stack.\n     */\n    this._inlineMenuOrientation = null;\n  }\n  /** Creates a menu stack that originates from an inline menu. */\n  static inline(orientation) {\n    const stack = new MenuStack();\n    stack._inlineMenuOrientation = orientation;\n    return stack;\n  }\n  /**\n   * Adds an item to the menu stack.\n   * @param menu the MenuStackItem to put on the stack.\n   */\n  push(menu) {\n    this._elements.push(menu);\n  }\n  /**\n   * Pop items off of the stack up to and including `lastItem` and emit each on the close\n   * observable. If the stack is empty or `lastItem` is not on the stack it does nothing.\n   * @param lastItem the last item to pop off the stack.\n   * @param options Options that configure behavior on close.\n   */\n  close(lastItem, options) {\n    const {\n      focusNextOnEmpty,\n      focusParentTrigger\n    } = {\n      ...options\n    };\n    if (this._elements.indexOf(lastItem) >= 0) {\n      let poppedElement;\n      do {\n        poppedElement = this._elements.pop();\n        this._close.next({\n          item: poppedElement,\n          focusParentTrigger\n        });\n      } while (poppedElement !== lastItem);\n      if (this.isEmpty()) {\n        this._empty.next(focusNextOnEmpty);\n      }\n    }\n  }\n  /**\n   * Pop items off of the stack up to but excluding `lastItem` and emit each on the close\n   * observable. If the stack is empty or `lastItem` is not on the stack it does nothing.\n   * @param lastItem the element which should be left on the stack\n   * @return whether or not an item was removed from the stack\n   */\n  closeSubMenuOf(lastItem) {\n    let removed = false;\n    if (this._elements.indexOf(lastItem) >= 0) {\n      removed = this.peek() !== lastItem;\n      while (this.peek() !== lastItem) {\n        this._close.next({\n          item: this._elements.pop()\n        });\n      }\n    }\n    return removed;\n  }\n  /**\n   * Pop off all MenuStackItems and emit each one on the `close` observable one by one.\n   * @param options Options that configure behavior on close.\n   */\n  closeAll(options) {\n    const {\n      focusNextOnEmpty,\n      focusParentTrigger\n    } = {\n      ...options\n    };\n    if (!this.isEmpty()) {\n      while (!this.isEmpty()) {\n        const menuStackItem = this._elements.pop();\n        if (menuStackItem) {\n          this._close.next({\n            item: menuStackItem,\n            focusParentTrigger\n          });\n        }\n      }\n      this._empty.next(focusNextOnEmpty);\n    }\n  }\n  /** Return true if this stack is empty. */\n  isEmpty() {\n    return !this._elements.length;\n  }\n  /** Return the length of the stack. */\n  length() {\n    return this._elements.length;\n  }\n  /** Get the top most element on the stack. */\n  peek() {\n    return this._elements[this._elements.length - 1];\n  }\n  /** Whether the menu stack is associated with an inline menu. */\n  hasInlineMenu() {\n    return this._inlineMenuOrientation != null;\n  }\n  /** The orientation of the associated inline menu. */\n  inlineMenuOrientation() {\n    return this._inlineMenuOrientation;\n  }\n  /** Sets whether the menu stack contains the focused element. */\n  setHasFocus(hasFocus) {\n    this._hasFocus.next(hasFocus);\n  }\n}\nMenuStack.ɵfac = function MenuStack_Factory(t) {\n  return new (t || MenuStack)();\n};\nMenuStack.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MenuStack,\n  factory: MenuStack.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MenuStack, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/** Injection token used for an implementation of MenuStack. */\nconst MENU_TRIGGER = new InjectionToken('cdk-menu-trigger');\n/**\n * Abstract directive that implements shared logic common to all menu triggers.\n * This class can be extended to create custom menu trigger types.\n */\nclass CdkMenuTriggerBase {\n  constructor() {\n    /** The DI injector for this component. */\n    this.injector = inject(Injector);\n    /** The view container ref for this component */\n    this.viewContainerRef = inject(ViewContainerRef);\n    /** The menu stack in which this menu resides. */\n    this.menuStack = inject(MENU_STACK);\n    /** Emits when the attached menu is requested to open */\n    this.opened = new EventEmitter();\n    /** Emits when the attached menu is requested to close */\n    this.closed = new EventEmitter();\n    /** A reference to the overlay which manages the triggered menu */\n    this.overlayRef = null;\n    /** Emits when this trigger is destroyed. */\n    this.destroyed = new Subject();\n    /** Emits when the outside pointer events listener on the overlay should be stopped. */\n    this.stopOutsideClicksListener = merge(this.closed, this.destroyed);\n  }\n  ngOnDestroy() {\n    this._destroyOverlay();\n    this.destroyed.next();\n    this.destroyed.complete();\n  }\n  /** Whether the attached menu is open. */\n  isOpen() {\n    return !!this.overlayRef?.hasAttached();\n  }\n  /** Registers a child menu as having been opened by this trigger. */\n  registerChildMenu(child) {\n    this.childMenu = child;\n  }\n  /**\n   * Get the portal to be attached to the overlay which contains the menu. Allows for the menu\n   * content to change dynamically and be reflected in the application.\n   */\n  getMenuContentPortal() {\n    const hasMenuContentChanged = this.menuTemplateRef !== this._menuPortal?.templateRef;\n    if (this.menuTemplateRef && (!this._menuPortal || hasMenuContentChanged)) {\n      this._menuPortal = new TemplatePortal(this.menuTemplateRef, this.viewContainerRef, this.menuData, this._getChildMenuInjector());\n    }\n    return this._menuPortal;\n  }\n  /**\n   * Whether the given element is inside the scope of this trigger's menu stack.\n   * @param element The element to check.\n   * @return Whether the element is inside the scope of this trigger's menu stack.\n   */\n  isElementInsideMenuStack(element) {\n    for (let el = element; el; el = el?.parentElement ?? null) {\n      if (el.getAttribute('data-cdk-menu-stack-id') === this.menuStack.id) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /** Destroy and unset the overlay reference it if exists */\n  _destroyOverlay() {\n    if (this.overlayRef) {\n      this.overlayRef.dispose();\n      this.overlayRef = null;\n    }\n  }\n  /** Gets the injector to use when creating a child menu. */\n  _getChildMenuInjector() {\n    this._childMenuInjector = this._childMenuInjector || Injector.create({\n      providers: [{\n        provide: MENU_TRIGGER,\n        useValue: this\n      }, {\n        provide: MENU_STACK,\n        useValue: this.menuStack\n      }],\n      parent: this.injector\n    });\n    return this._childMenuInjector;\n  }\n}\nCdkMenuTriggerBase.ɵfac = function CdkMenuTriggerBase_Factory(t) {\n  return new (t || CdkMenuTriggerBase)();\n};\nCdkMenuTriggerBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkMenuTriggerBase,\n  hostVars: 2,\n  hostBindings: function CdkMenuTriggerBase_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-controls\", ctx.childMenu == null ? null : ctx.childMenu.id)(\"data-cdk-menu-stack-id\", ctx.menuStack.id);\n    }\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkMenuTriggerBase, [{\n    type: Directive,\n    args: [{\n      host: {\n        '[attr.aria-controls]': 'childMenu?.id',\n        '[attr.data-cdk-menu-stack-id]': 'menuStack.id'\n      }\n    }]\n  }], null, null);\n})();\n\n/**\n * Throws an exception when an instance of the PointerFocusTracker is not provided.\n * @docs-private\n */\nfunction throwMissingPointerFocusTracker() {\n  throw Error('expected an instance of PointerFocusTracker to be provided');\n}\n/**\n * Throws an exception when a reference to the parent menu is not provided.\n * @docs-private\n */\nfunction throwMissingMenuReference() {\n  throw Error('expected a reference to the parent menu');\n}\n\n/** Injection token used for an implementation of MenuAim. */\nconst MENU_AIM = new InjectionToken('cdk-menu-aim');\n/** Capture every nth mouse move event. */\nconst MOUSE_MOVE_SAMPLE_FREQUENCY = 3;\n/** The number of mouse move events to track. */\nconst NUM_POINTS = 5;\n/**\n * How long to wait before closing a sibling menu if a user stops short of the submenu they were\n * predicted to go into.\n */\nconst CLOSE_DELAY = 300;\n/** Calculate the slope between point a and b. */\nfunction getSlope(a, b) {\n  return (b.y - a.y) / (b.x - a.x);\n}\n/** Calculate the y intercept for the given point and slope. */\nfunction getYIntercept(point, slope) {\n  return point.y - slope * point.x;\n}\n/**\n * Whether the given mouse trajectory line defined by the slope and y intercept falls within the\n * submenu as defined by `submenuPoints`\n * @param submenuPoints the submenu DOMRect points.\n * @param m the slope of the trajectory line.\n * @param b the y intercept of the trajectory line.\n * @return true if any point on the line falls within the submenu.\n */\nfunction isWithinSubmenu(submenuPoints, m, b) {\n  const {\n    left,\n    right,\n    top,\n    bottom\n  } = submenuPoints;\n  // Check for intersection with each edge of the submenu (left, right, top, bottom)\n  // by fixing one coordinate to that edge's coordinate (either x or y) and checking if the\n  // other coordinate is within bounds.\n  return m * left + b >= top && m * left + b <= bottom || m * right + b >= top && m * right + b <= bottom || (top - b) / m >= left && (top - b) / m <= right || (bottom - b) / m >= left && (bottom - b) / m <= right;\n}\n/**\n * TargetMenuAim predicts if a user is moving into a submenu. It calculates the\n * trajectory of the user's mouse movement in the current menu to determine if the\n * mouse is moving towards an open submenu.\n *\n * The determination is made by calculating the slope of the users last NUM_POINTS moves where each\n * pair of points determines if the trajectory line points into the submenu. It uses consensus\n * approach by checking if at least NUM_POINTS / 2 pairs determine that the user is moving towards\n * to submenu.\n */\nclass TargetMenuAim {\n  constructor() {\n    /** The Angular zone. */\n    this._ngZone = inject(NgZone);\n    /** The last NUM_POINTS mouse move events. */\n    this._points = [];\n    /** Emits when this service is destroyed. */\n    this._destroyed = new Subject();\n  }\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /**\n   * Set the Menu and its PointerFocusTracker.\n   * @param menu The menu that this menu aim service controls.\n   * @param pointerTracker The `PointerFocusTracker` for the given menu.\n   */\n  initialize(menu, pointerTracker) {\n    this._menu = menu;\n    this._pointerTracker = pointerTracker;\n    this._subscribeToMouseMoves();\n  }\n  /**\n   * Calls the `doToggle` callback when it is deemed that the user is not moving towards\n   * the submenu.\n   * @param doToggle the function called when the user is not moving towards the submenu.\n   */\n  toggle(doToggle) {\n    // If the menu is horizontal the sub-menus open below and there is no risk of premature\n    // closing of any sub-menus therefore we automatically resolve the callback.\n    if (this._menu.orientation === 'horizontal') {\n      doToggle();\n    }\n    this._checkConfigured();\n    const siblingItemIsWaiting = !!this._timeoutId;\n    const hasPoints = this._points.length > 1;\n    if (hasPoints && !siblingItemIsWaiting) {\n      if (this._isMovingToSubmenu()) {\n        this._startTimeout(doToggle);\n      } else {\n        doToggle();\n      }\n    } else if (!siblingItemIsWaiting) {\n      doToggle();\n    }\n  }\n  /**\n   * Start the delayed toggle handler if one isn't running already.\n   *\n   * The delayed toggle handler executes the `doToggle` callback after some period of time iff the\n   * users mouse is on an item in the current menu.\n   *\n   * @param doToggle the function called when the user is not moving towards the submenu.\n   */\n  _startTimeout(doToggle) {\n    // If the users mouse is moving towards a submenu we don't want to immediately resolve.\n    // Wait for some period of time before determining if the previous menu should close in\n    // cases where the user may have moved towards the submenu but stopped on a sibling menu\n    // item intentionally.\n    const timeoutId = setTimeout(() => {\n      // Resolve if the user is currently moused over some element in the root menu\n      if (this._pointerTracker.activeElement && timeoutId === this._timeoutId) {\n        doToggle();\n      }\n      this._timeoutId = null;\n    }, CLOSE_DELAY);\n    this._timeoutId = timeoutId;\n  }\n  /** Whether the user is heading towards the open submenu. */\n  _isMovingToSubmenu() {\n    const submenuPoints = this._getSubmenuBounds();\n    if (!submenuPoints) {\n      return false;\n    }\n    let numMoving = 0;\n    const currPoint = this._points[this._points.length - 1];\n    // start from the second last point and calculate the slope between each point and the last\n    // point.\n    for (let i = this._points.length - 2; i >= 0; i--) {\n      const previous = this._points[i];\n      const slope = getSlope(currPoint, previous);\n      if (isWithinSubmenu(submenuPoints, slope, getYIntercept(currPoint, slope))) {\n        numMoving++;\n      }\n    }\n    return numMoving >= Math.floor(NUM_POINTS / 2);\n  }\n  /** Get the bounding DOMRect for the open submenu. */\n  _getSubmenuBounds() {\n    return this._pointerTracker?.previousElement?.getMenu()?.nativeElement.getBoundingClientRect();\n  }\n  /**\n   * Check if a reference to the PointerFocusTracker and menu element is provided.\n   * @throws an error if neither reference is provided.\n   */\n  _checkConfigured() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._pointerTracker) {\n        throwMissingPointerFocusTracker();\n      }\n      if (!this._menu) {\n        throwMissingMenuReference();\n      }\n    }\n  }\n  /** Subscribe to the root menus mouse move events and update the tracked mouse points. */\n  _subscribeToMouseMoves() {\n    this._ngZone.runOutsideAngular(() => {\n      fromEvent(this._menu.nativeElement, 'mousemove').pipe(filter((_, index) => index % MOUSE_MOVE_SAMPLE_FREQUENCY === 0), takeUntil(this._destroyed)).subscribe(event => {\n        this._points.push({\n          x: event.clientX,\n          y: event.clientY\n        });\n        if (this._points.length > NUM_POINTS) {\n          this._points.shift();\n        }\n      });\n    });\n  }\n}\nTargetMenuAim.ɵfac = function TargetMenuAim_Factory(t) {\n  return new (t || TargetMenuAim)();\n};\nTargetMenuAim.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TargetMenuAim,\n  factory: TargetMenuAim.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TargetMenuAim, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * CdkTargetMenuAim is a provider for the TargetMenuAim service. It can be added to an\n * element with either the `cdkMenu` or `cdkMenuBar` directive and child menu items.\n */\nclass CdkTargetMenuAim {}\nCdkTargetMenuAim.ɵfac = function CdkTargetMenuAim_Factory(t) {\n  return new (t || CdkTargetMenuAim)();\n};\nCdkTargetMenuAim.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkTargetMenuAim,\n  selectors: [[\"\", \"cdkTargetMenuAim\", \"\"]],\n  exportAs: [\"cdkTargetMenuAim\"],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MENU_AIM,\n    useClass: TargetMenuAim\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkTargetMenuAim, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTargetMenuAim]',\n      exportAs: 'cdkTargetMenuAim',\n      standalone: true,\n      providers: [{\n        provide: MENU_AIM,\n        useClass: TargetMenuAim\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\n * A directive that turns its host element into a trigger for a popup menu.\n * It can be combined with cdkMenuItem to create sub-menus. If the element is in a top level\n * MenuBar it will open the menu on click, or if a sibling is already opened it will open on hover.\n * If it is inside of a Menu it will open the attached Submenu on hover regardless of its sibling\n * state.\n */\nclass CdkMenuTrigger extends CdkMenuTriggerBase {\n  constructor() {\n    super();\n    this._elementRef = inject(ElementRef);\n    this._overlay = inject(Overlay);\n    this._ngZone = inject(NgZone);\n    this._directionality = inject(Directionality, {\n      optional: true\n    });\n    this._inputModalityDetector = inject(InputModalityDetector);\n    /** The parent menu this trigger belongs to. */\n    this._parentMenu = inject(CDK_MENU, {\n      optional: true\n    });\n    /** The menu aim service used by this menu. */\n    this._menuAim = inject(MENU_AIM, {\n      optional: true\n    });\n    this._setRole();\n    this._registerCloseHandler();\n    this._subscribeToMenuStackClosed();\n    this._subscribeToMouseEnter();\n    this._subscribeToMenuStackHasFocus();\n    this._setType();\n  }\n  /** Toggle the attached menu. */\n  toggle() {\n    this.isOpen() ? this.close() : this.open();\n  }\n  /** Open the attached menu. */\n  open() {\n    if (!this.isOpen() && this.menuTemplateRef != null) {\n      this.opened.next();\n      this.overlayRef = this.overlayRef || this._overlay.create(this._getOverlayConfig());\n      this.overlayRef.attach(this.getMenuContentPortal());\n      this._subscribeToOutsideClicks();\n    }\n  }\n  /** Close the opened menu. */\n  close() {\n    if (this.isOpen()) {\n      this.closed.next();\n      this.overlayRef.detach();\n    }\n    this._closeSiblingTriggers();\n  }\n  /**\n   * Get a reference to the rendered Menu if the Menu is open and rendered in the DOM.\n   */\n  getMenu() {\n    return this.childMenu;\n  }\n  /**\n   * Handles keyboard events for the menu item.\n   * @param event The keyboard event to handle\n   */\n  _toggleOnKeydown(event) {\n    const isParentVertical = this._parentMenu?.orientation === 'vertical';\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          this.toggle();\n          this.childMenu?.focusFirstItem('keyboard');\n        }\n        break;\n      case RIGHT_ARROW:\n        if (!hasModifierKey(event)) {\n          if (this._parentMenu && isParentVertical && this._directionality?.value !== 'rtl') {\n            event.preventDefault();\n            this.open();\n            this.childMenu?.focusFirstItem('keyboard');\n          }\n        }\n        break;\n      case LEFT_ARROW:\n        if (!hasModifierKey(event)) {\n          if (this._parentMenu && isParentVertical && this._directionality?.value === 'rtl') {\n            event.preventDefault();\n            this.open();\n            this.childMenu?.focusFirstItem('keyboard');\n          }\n        }\n        break;\n      case DOWN_ARROW:\n      case UP_ARROW:\n        if (!hasModifierKey(event)) {\n          if (!isParentVertical) {\n            event.preventDefault();\n            this.open();\n            event.keyCode === DOWN_ARROW ? this.childMenu?.focusFirstItem('keyboard') : this.childMenu?.focusLastItem('keyboard');\n          }\n        }\n        break;\n    }\n  }\n  /** Handles clicks on the menu trigger. */\n  _handleClick() {\n    // Don't handle clicks originating from the keyboard since we\n    // already do the same on `keydown` events for enter and space.\n    if (this._inputModalityDetector.mostRecentModality !== 'keyboard') {\n      this.toggle();\n      this.childMenu?.focusFirstItem('mouse');\n    }\n  }\n  /**\n   * Sets whether the trigger's menu stack has focus.\n   * @param hasFocus Whether the menu stack has focus.\n   */\n  _setHasFocus(hasFocus) {\n    if (!this._parentMenu) {\n      this.menuStack.setHasFocus(hasFocus);\n    }\n  }\n  /**\n   * Subscribe to the mouseenter events and close any sibling menu items if this element is moused\n   * into.\n   */\n  _subscribeToMouseEnter() {\n    this._ngZone.runOutsideAngular(() => {\n      fromEvent(this._elementRef.nativeElement, 'mouseenter').pipe(filter(() => !this.menuStack.isEmpty() && !this.isOpen()), takeUntil(this.destroyed)).subscribe(() => {\n        // Closes any sibling menu items and opens the menu associated with this trigger.\n        const toggleMenus = () => this._ngZone.run(() => {\n          this._closeSiblingTriggers();\n          this.open();\n        });\n        if (this._menuAim) {\n          this._menuAim.toggle(toggleMenus);\n        } else {\n          toggleMenus();\n        }\n      });\n    });\n  }\n  /** Close out any sibling menu trigger menus. */\n  _closeSiblingTriggers() {\n    if (this._parentMenu) {\n      // If nothing was removed from the stack and the last element is not the parent item\n      // that means that the parent menu is a menu bar since we don't put the menu bar on the\n      // stack\n      const isParentMenuBar = !this.menuStack.closeSubMenuOf(this._parentMenu) && this.menuStack.peek() !== this._parentMenu;\n      if (isParentMenuBar) {\n        this.menuStack.closeAll();\n      }\n    } else {\n      this.menuStack.closeAll();\n    }\n  }\n  /** Get the configuration object used to create the overlay. */\n  _getOverlayConfig() {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPositionStrategy(),\n      scrollStrategy: this._overlay.scrollStrategies.reposition(),\n      direction: this._directionality || undefined\n    });\n  }\n  /** Build the position strategy for the overlay which specifies where to place the menu. */\n  _getOverlayPositionStrategy() {\n    return this._overlay.position().flexibleConnectedTo(this._elementRef).withLockedPosition().withGrowAfterOpen().withPositions(this._getOverlayPositions());\n  }\n  /** Get the preferred positions for the opened menu relative to the menu item. */\n  _getOverlayPositions() {\n    return this.menuPosition ?? (!this._parentMenu || this._parentMenu.orientation === 'horizontal' ? STANDARD_DROPDOWN_BELOW_POSITIONS : STANDARD_DROPDOWN_ADJACENT_POSITIONS);\n  }\n  /**\n   * Subscribe to the MenuStack close events if this is a standalone trigger and close out the menu\n   * this triggers when requested.\n   */\n  _registerCloseHandler() {\n    if (!this._parentMenu) {\n      this.menuStack.closed.pipe(takeUntil(this.destroyed)).subscribe(({\n        item\n      }) => {\n        if (item === this.childMenu) {\n          this.close();\n        }\n      });\n    }\n  }\n  /**\n   * Subscribe to the overlays outside pointer events stream and handle closing out the stack if a\n   * click occurs outside the menus.\n   */\n  _subscribeToOutsideClicks() {\n    if (this.overlayRef) {\n      this.overlayRef.outsidePointerEvents().pipe(takeUntil(this.stopOutsideClicksListener)).subscribe(event => {\n        const target = _getEventTarget(event);\n        const element = this._elementRef.nativeElement;\n        if (target !== element && !element.contains(target)) {\n          if (!this.isElementInsideMenuStack(target)) {\n            this.menuStack.closeAll();\n          } else {\n            this._closeSiblingTriggers();\n          }\n        }\n      });\n    }\n  }\n  /** Subscribe to the MenuStack hasFocus events. */\n  _subscribeToMenuStackHasFocus() {\n    if (!this._parentMenu) {\n      this.menuStack.hasFocus.pipe(takeUntil(this.destroyed)).subscribe(hasFocus => {\n        if (!hasFocus) {\n          this.menuStack.closeAll();\n        }\n      });\n    }\n  }\n  /** Subscribe to the MenuStack closed events. */\n  _subscribeToMenuStackClosed() {\n    if (!this._parentMenu) {\n      this.menuStack.closed.subscribe(({\n        focusParentTrigger\n      }) => {\n        if (focusParentTrigger && !this.menuStack.length()) {\n          this._elementRef.nativeElement.focus();\n        }\n      });\n    }\n  }\n  /** Sets the role attribute for this trigger if needed. */\n  _setRole() {\n    // If this trigger is part of another menu, the cdkMenuItem directive will handle setting the\n    // role, otherwise this is a standalone trigger, and we should ensure it has role=\"button\".\n    if (!this._parentMenu) {\n      this._elementRef.nativeElement.setAttribute('role', 'button');\n    }\n  }\n  /** Sets thte `type` attribute of the trigger. */\n  _setType() {\n    const element = this._elementRef.nativeElement;\n    if (element.nodeName === 'BUTTON' && !element.getAttribute('type')) {\n      // Prevents form submissions.\n      element.setAttribute('type', 'button');\n    }\n  }\n}\nCdkMenuTrigger.ɵfac = function CdkMenuTrigger_Factory(t) {\n  return new (t || CdkMenuTrigger)();\n};\nCdkMenuTrigger.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkMenuTrigger,\n  selectors: [[\"\", \"cdkMenuTriggerFor\", \"\"]],\n  hostAttrs: [1, \"cdk-menu-trigger\"],\n  hostVars: 2,\n  hostBindings: function CdkMenuTrigger_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focusin\", function CdkMenuTrigger_focusin_HostBindingHandler() {\n        return ctx._setHasFocus(true);\n      })(\"focusout\", function CdkMenuTrigger_focusout_HostBindingHandler() {\n        return ctx._setHasFocus(false);\n      })(\"keydown\", function CdkMenuTrigger_keydown_HostBindingHandler($event) {\n        return ctx._toggleOnKeydown($event);\n      })(\"click\", function CdkMenuTrigger_click_HostBindingHandler() {\n        return ctx._handleClick();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-haspopup\", ctx.menuTemplateRef ? \"menu\" : null)(\"aria-expanded\", ctx.menuTemplateRef == null ? null : ctx.isOpen());\n    }\n  },\n  inputs: {\n    menuTemplateRef: [\"cdkMenuTriggerFor\", \"menuTemplateRef\"],\n    menuPosition: [\"cdkMenuPosition\", \"menuPosition\"],\n    menuData: [\"cdkMenuTriggerData\", \"menuData\"]\n  },\n  outputs: {\n    opened: \"cdkMenuOpened\",\n    closed: \"cdkMenuClosed\"\n  },\n  exportAs: [\"cdkMenuTriggerFor\"],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MENU_TRIGGER,\n    useExisting: CdkMenuTrigger\n  }, PARENT_OR_NEW_MENU_STACK_PROVIDER]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkMenuTrigger, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkMenuTriggerFor]',\n      exportAs: 'cdkMenuTriggerFor',\n      standalone: true,\n      host: {\n        'class': 'cdk-menu-trigger',\n        '[attr.aria-haspopup]': 'menuTemplateRef ? \"menu\" : null',\n        '[attr.aria-expanded]': 'menuTemplateRef == null ? null : isOpen()',\n        '(focusin)': '_setHasFocus(true)',\n        '(focusout)': '_setHasFocus(false)',\n        '(keydown)': '_toggleOnKeydown($event)',\n        '(click)': '_handleClick()'\n      },\n      inputs: ['menuTemplateRef: cdkMenuTriggerFor', 'menuPosition: cdkMenuPosition', 'menuData: cdkMenuTriggerData'],\n      outputs: ['opened: cdkMenuOpened', 'closed: cdkMenuClosed'],\n      providers: [{\n        provide: MENU_TRIGGER,\n        useExisting: CdkMenuTrigger\n      }, PARENT_OR_NEW_MENU_STACK_PROVIDER]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\n/**\n * Directive which provides the ability for an element to be focused and navigated to using the\n * keyboard when residing in a CdkMenu, CdkMenuBar, or CdkMenuGroup. It performs user defined\n * behavior when clicked.\n */\nclass CdkMenuItem {\n  /**  Whether the CdkMenuItem is disabled - defaults to false */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /** Whether the menu item opens a menu. */\n  get hasMenu() {\n    return this._menuTrigger?.menuTemplateRef != null;\n  }\n  constructor() {\n    this._dir = inject(Directionality, {\n      optional: true\n    });\n    this._inputModalityDetector = inject(InputModalityDetector);\n    this._elementRef = inject(ElementRef);\n    this._ngZone = inject(NgZone);\n    /** The menu aim service used by this menu. */\n    this._menuAim = inject(MENU_AIM, {\n      optional: true\n    });\n    /** The stack of menus this menu belongs to. */\n    this._menuStack = inject(MENU_STACK);\n    /** The parent menu in which this menuitem resides. */\n    this._parentMenu = inject(CDK_MENU, {\n      optional: true\n    });\n    /** Reference to the CdkMenuItemTrigger directive if one is added to the same element */\n    this._menuTrigger = inject(CdkMenuTrigger, {\n      optional: true,\n      self: true\n    });\n    this._disabled = false;\n    /**\n     * If this MenuItem is a regular MenuItem, outputs when it is triggered by a keyboard or mouse\n     * event.\n     */\n    this.triggered = new EventEmitter();\n    /**\n     * The tabindex for this menu item managed internally and used for implementing roving a\n     * tab index.\n     */\n    this._tabindex = -1;\n    /** Whether the item should close the menu if triggered by the spacebar. */\n    this.closeOnSpacebarTrigger = true;\n    /** Emits when the menu item is destroyed. */\n    this.destroyed = new Subject();\n    this._setupMouseEnter();\n    this._setType();\n    if (this._isStandaloneItem()) {\n      this._tabindex = 0;\n    }\n  }\n  ngOnDestroy() {\n    this.destroyed.next();\n    this.destroyed.complete();\n  }\n  /** Place focus on the element. */\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n  /**\n   * If the menu item is not disabled and the element does not have a menu trigger attached, emit\n   * on the cdkMenuItemTriggered emitter and close all open menus.\n   * @param options Options the configure how the item is triggered\n   *   - keepOpen: specifies that the menu should be kept open after triggering the item.\n   */\n  trigger(options) {\n    const {\n      keepOpen\n    } = {\n      ...options\n    };\n    if (!this.disabled && !this.hasMenu) {\n      this.triggered.next();\n      if (!keepOpen) {\n        this._menuStack.closeAll({\n          focusParentTrigger: true\n        });\n      }\n    }\n  }\n  /** Return true if this MenuItem has an attached menu and it is open. */\n  isMenuOpen() {\n    return !!this._menuTrigger?.isOpen();\n  }\n  /**\n   * Get a reference to the rendered Menu if the Menu is open and it is visible in the DOM.\n   * @return the menu if it is open, otherwise undefined.\n   */\n  getMenu() {\n    return this._menuTrigger?.getMenu();\n  }\n  /** Get the CdkMenuTrigger associated with this element. */\n  getMenuTrigger() {\n    return this._menuTrigger;\n  }\n  /** Get the label for this element which is required by the FocusableOption interface. */\n  getLabel() {\n    return this.typeaheadLabel || this._elementRef.nativeElement.textContent?.trim() || '';\n  }\n  /** Reset the tabindex to -1. */\n  _resetTabIndex() {\n    if (!this._isStandaloneItem()) {\n      this._tabindex = -1;\n    }\n  }\n  /**\n   * Set the tab index to 0 if not disabled and it's a focus event, or a mouse enter if this element\n   * is not in a menu bar.\n   */\n  _setTabIndex(event) {\n    if (this.disabled) {\n      return;\n    }\n    // don't set the tabindex if there are no open sibling or parent menus\n    if (!event || !this._menuStack.isEmpty()) {\n      this._tabindex = 0;\n    }\n  }\n  /**\n   * Handles keyboard events for the menu item, specifically either triggering the user defined\n   * callback or opening/closing the current menu based on whether the left or right arrow key was\n   * pressed.\n   * @param event the keyboard event to handle\n   */\n  _onKeydown(event) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          this.trigger({\n            keepOpen: event.keyCode === SPACE && !this.closeOnSpacebarTrigger\n          });\n        }\n        break;\n      case RIGHT_ARROW:\n        if (!hasModifierKey(event)) {\n          if (this._parentMenu && this._isParentVertical()) {\n            if (this._dir?.value !== 'rtl') {\n              this._forwardArrowPressed(event);\n            } else {\n              this._backArrowPressed(event);\n            }\n          }\n        }\n        break;\n      case LEFT_ARROW:\n        if (!hasModifierKey(event)) {\n          if (this._parentMenu && this._isParentVertical()) {\n            if (this._dir?.value !== 'rtl') {\n              this._backArrowPressed(event);\n            } else {\n              this._forwardArrowPressed(event);\n            }\n          }\n        }\n        break;\n    }\n  }\n  /** Handles clicks on the menu item. */\n  _handleClick() {\n    // Don't handle clicks originating from the keyboard since we\n    // already do the same on `keydown` events for enter and space.\n    if (this._inputModalityDetector.mostRecentModality !== 'keyboard') {\n      this.trigger();\n    }\n  }\n  /** Whether this menu item is standalone or within a menu or menu bar. */\n  _isStandaloneItem() {\n    return !this._parentMenu;\n  }\n  /**\n   * Handles the user pressing the back arrow key.\n   * @param event The keyboard event.\n   */\n  _backArrowPressed(event) {\n    const parentMenu = this._parentMenu;\n    if (this._menuStack.hasInlineMenu() || this._menuStack.length() > 1) {\n      event.preventDefault();\n      this._menuStack.close(parentMenu, {\n        focusNextOnEmpty: this._menuStack.inlineMenuOrientation() === 'horizontal' ? 1 /* FocusNext.previousItem */ : 2 /* FocusNext.currentItem */,\n        focusParentTrigger: true\n      });\n    }\n  }\n  /**\n   * Handles the user pressing the forward arrow key.\n   * @param event The keyboard event.\n   */\n  _forwardArrowPressed(event) {\n    if (!this.hasMenu && this._menuStack.inlineMenuOrientation() === 'horizontal') {\n      event.preventDefault();\n      this._menuStack.closeAll({\n        focusNextOnEmpty: 0 /* FocusNext.nextItem */,\n        focusParentTrigger: true\n      });\n    }\n  }\n  /**\n   * Subscribe to the mouseenter events and close any sibling menu items if this element is moused\n   * into.\n   */\n  _setupMouseEnter() {\n    if (!this._isStandaloneItem()) {\n      const closeOpenSiblings = () => this._ngZone.run(() => this._menuStack.closeSubMenuOf(this._parentMenu));\n      this._ngZone.runOutsideAngular(() => fromEvent(this._elementRef.nativeElement, 'mouseenter').pipe(filter(() => !this._menuStack.isEmpty() && !this.hasMenu), takeUntil(this.destroyed)).subscribe(() => {\n        if (this._menuAim) {\n          this._menuAim.toggle(closeOpenSiblings);\n        } else {\n          closeOpenSiblings();\n        }\n      }));\n    }\n  }\n  /**\n   * Return true if the enclosing parent menu is configured in a horizontal orientation, false\n   * otherwise or if no parent.\n   */\n  _isParentVertical() {\n    return this._parentMenu?.orientation === 'vertical';\n  }\n  /** Sets the `type` attribute of the menu item. */\n  _setType() {\n    const element = this._elementRef.nativeElement;\n    if (element.nodeName === 'BUTTON' && !element.getAttribute('type')) {\n      // Prevent form submissions.\n      element.setAttribute('type', 'button');\n    }\n  }\n}\nCdkMenuItem.ɵfac = function CdkMenuItem_Factory(t) {\n  return new (t || CdkMenuItem)();\n};\nCdkMenuItem.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkMenuItem,\n  selectors: [[\"\", \"cdkMenuItem\", \"\"]],\n  hostAttrs: [\"role\", \"menuitem\", 1, \"cdk-menu-item\"],\n  hostVars: 2,\n  hostBindings: function CdkMenuItem_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"blur\", function CdkMenuItem_blur_HostBindingHandler() {\n        return ctx._resetTabIndex();\n      })(\"focus\", function CdkMenuItem_focus_HostBindingHandler() {\n        return ctx._setTabIndex();\n      })(\"click\", function CdkMenuItem_click_HostBindingHandler() {\n        return ctx._handleClick();\n      })(\"keydown\", function CdkMenuItem_keydown_HostBindingHandler($event) {\n        return ctx._onKeydown($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"tabindex\", ctx._tabindex);\n      i0.ɵɵattribute(\"aria-disabled\", ctx.disabled || null);\n    }\n  },\n  inputs: {\n    disabled: [\"cdkMenuItemDisabled\", \"disabled\"],\n    typeaheadLabel: [\"cdkMenuitemTypeaheadLabel\", \"typeaheadLabel\"]\n  },\n  outputs: {\n    triggered: \"cdkMenuItemTriggered\"\n  },\n  exportAs: [\"cdkMenuItem\"],\n  standalone: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkMenuItem, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkMenuItem]',\n      exportAs: 'cdkMenuItem',\n      standalone: true,\n      host: {\n        'role': 'menuitem',\n        'class': 'cdk-menu-item',\n        '[tabindex]': '_tabindex',\n        '[attr.aria-disabled]': 'disabled || null',\n        '(blur)': '_resetTabIndex()',\n        '(focus)': '_setTabIndex()',\n        '(click)': '_handleClick()',\n        '(keydown)': '_onKeydown($event)'\n      }\n    }]\n  }], function () {\n    return [];\n  }, {\n    disabled: [{\n      type: Input,\n      args: ['cdkMenuItemDisabled']\n    }],\n    typeaheadLabel: [{\n      type: Input,\n      args: ['cdkMenuitemTypeaheadLabel']\n    }],\n    triggered: [{\n      type: Output,\n      args: ['cdkMenuItemTriggered']\n    }]\n  });\n})();\n\n/**\n * PointerFocusTracker keeps track of the currently active item under mouse focus. It also has\n * observables which emit when the users mouse enters and leaves a tracked element.\n */\nclass PointerFocusTracker {\n  constructor( /** The list of items being tracked. */\n  _items) {\n    this._items = _items;\n    /** Emits when an element is moused into. */\n    this.entered = this._getItemPointerEntries();\n    /** Emits when an element is moused out. */\n    this.exited = this._getItemPointerExits();\n    /** Emits when this is destroyed. */\n    this._destroyed = new Subject();\n    this.entered.subscribe(element => this.activeElement = element);\n    this.exited.subscribe(() => {\n      this.previousElement = this.activeElement;\n      this.activeElement = undefined;\n    });\n  }\n  /** Stop the managers listeners. */\n  destroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /**\n   * Gets a stream of pointer (mouse) entries into the given items.\n   * This should typically run outside the Angular zone.\n   */\n  _getItemPointerEntries() {\n    return defer(() => this._items.changes.pipe(startWith(this._items), mergeMap(list => list.map(element => fromEvent(element._elementRef.nativeElement, 'mouseenter').pipe(mapTo(element), takeUntil(this._items.changes)))), mergeAll()));\n  }\n  /**\n   * Gets a stream of pointer (mouse) exits out of the given items.\n   * This should typically run outside the Angular zone.\n   */\n  _getItemPointerExits() {\n    return defer(() => this._items.changes.pipe(startWith(this._items), mergeMap(list => list.map(element => fromEvent(element._elementRef.nativeElement, 'mouseout').pipe(mapTo(element), takeUntil(this._items.changes)))), mergeAll()));\n  }\n}\n\n/** Counter used to create unique IDs for menus. */\nlet nextId$1 = 0;\n/**\n * Abstract directive that implements shared logic common to all menus.\n * This class can be extended to create custom menu types.\n */\nclass CdkMenuBase extends CdkMenuGroup {\n  constructor() {\n    super(...arguments);\n    /** The menu's native DOM host element. */\n    this.nativeElement = inject(ElementRef).nativeElement;\n    /** The Angular zone. */\n    this.ngZone = inject(NgZone);\n    /** The stack of menus this menu belongs to. */\n    this.menuStack = inject(MENU_STACK);\n    /** The menu aim service used by this menu. */\n    this.menuAim = inject(MENU_AIM, {\n      optional: true,\n      self: true\n    });\n    /** The directionality (text direction) of the current page. */\n    this.dir = inject(Directionality, {\n      optional: true\n    });\n    /** The id of the menu's host element. */\n    this.id = `cdk-menu-${nextId$1++}`;\n    /** The direction items in the menu flow. */\n    this.orientation = 'vertical';\n    /**\n     * Whether the menu is displayed inline (i.e. always present vs a conditional popup that the\n     * user triggers with a trigger element).\n     */\n    this.isInline = false;\n    /** Emits when the MenuBar is destroyed. */\n    this.destroyed = new Subject();\n    /** Whether this menu's menu stack has focus. */\n    this._menuStackHasFocus = false;\n  }\n  ngAfterContentInit() {\n    if (!this.isInline) {\n      this.menuStack.push(this);\n    }\n    this._setKeyManager();\n    this._subscribeToMenuStackHasFocus();\n    this._subscribeToMenuOpen();\n    this._subscribeToMenuStackClosed();\n    this._setUpPointerTracker();\n  }\n  ngOnDestroy() {\n    this.keyManager?.destroy();\n    this.destroyed.next();\n    this.destroyed.complete();\n    this.pointerTracker?.destroy();\n  }\n  /**\n   * Place focus on the first MenuItem in the menu and set the focus origin.\n   * @param focusOrigin The origin input mode of the focus event.\n   */\n  focusFirstItem(focusOrigin = 'program') {\n    this.keyManager.setFocusOrigin(focusOrigin);\n    this.keyManager.setFirstItemActive();\n  }\n  /**\n   * Place focus on the last MenuItem in the menu and set the focus origin.\n   * @param focusOrigin The origin input mode of the focus event.\n   */\n  focusLastItem(focusOrigin = 'program') {\n    this.keyManager.setFocusOrigin(focusOrigin);\n    this.keyManager.setLastItemActive();\n  }\n  /** Gets the tabindex for this menu. */\n  _getTabIndex() {\n    const tabindexIfInline = this._menuStackHasFocus ? -1 : 0;\n    return this.isInline ? tabindexIfInline : null;\n  }\n  /**\n   * Close the open menu if the current active item opened the requested MenuStackItem.\n   * @param menu The menu requested to be closed.\n   * @param options Options to configure the behavior on close.\n   *   - `focusParentTrigger` Whether to focus the parent trigger after closing the menu.\n   */\n  closeOpenMenu(menu, options) {\n    const {\n      focusParentTrigger\n    } = {\n      ...options\n    };\n    const keyManager = this.keyManager;\n    const trigger = this.triggerItem;\n    if (menu === trigger?.getMenuTrigger()?.getMenu()) {\n      trigger?.getMenuTrigger()?.close();\n      // If the user has moused over a sibling item we want to focus the element under mouse focus\n      // not the trigger which previously opened the now closed menu.\n      if (focusParentTrigger) {\n        if (trigger) {\n          keyManager.setActiveItem(trigger);\n        } else {\n          keyManager.setFirstItemActive();\n        }\n      }\n    }\n  }\n  /** Setup the FocusKeyManager with the correct orientation for the menu. */\n  _setKeyManager() {\n    this.keyManager = new FocusKeyManager(this.items).withWrap().withTypeAhead().withHomeAndEnd();\n    if (this.orientation === 'horizontal') {\n      this.keyManager.withHorizontalOrientation(this.dir?.value || 'ltr');\n    } else {\n      this.keyManager.withVerticalOrientation();\n    }\n  }\n  /**\n   * Subscribe to the menu trigger's open events in order to track the trigger which opened the menu\n   * and stop tracking it when the menu is closed.\n   */\n  _subscribeToMenuOpen() {\n    const exitCondition = merge(this.items.changes, this.destroyed);\n    this.items.changes.pipe(startWith(this.items), mergeMap(list => list.filter(item => item.hasMenu).map(item => item.getMenuTrigger().opened.pipe(mapTo(item), takeUntil(exitCondition)))), mergeAll(), switchMap(item => {\n      this.triggerItem = item;\n      return item.getMenuTrigger().closed;\n    }), takeUntil(this.destroyed)).subscribe(() => this.triggerItem = undefined);\n  }\n  /** Subscribe to the MenuStack close events. */\n  _subscribeToMenuStackClosed() {\n    this.menuStack.closed.pipe(takeUntil(this.destroyed)).subscribe(({\n      item,\n      focusParentTrigger\n    }) => this.closeOpenMenu(item, {\n      focusParentTrigger\n    }));\n  }\n  /** Subscribe to the MenuStack hasFocus events. */\n  _subscribeToMenuStackHasFocus() {\n    if (this.isInline) {\n      this.menuStack.hasFocus.pipe(takeUntil(this.destroyed)).subscribe(hasFocus => {\n        this._menuStackHasFocus = hasFocus;\n      });\n    }\n  }\n  /**\n   * Set the PointerFocusTracker and ensure that when mouse focus changes the key manager is updated\n   * with the latest menu item under mouse focus.\n   */\n  _setUpPointerTracker() {\n    if (this.menuAim) {\n      this.ngZone.runOutsideAngular(() => {\n        this.pointerTracker = new PointerFocusTracker(this.items);\n      });\n      this.menuAim.initialize(this, this.pointerTracker);\n    }\n  }\n}\nCdkMenuBase.ɵfac = /* @__PURE__ */function () {\n  let ɵCdkMenuBase_BaseFactory;\n  return function CdkMenuBase_Factory(t) {\n    return (ɵCdkMenuBase_BaseFactory || (ɵCdkMenuBase_BaseFactory = i0.ɵɵgetInheritedFactory(CdkMenuBase)))(t || CdkMenuBase);\n  };\n}();\nCdkMenuBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkMenuBase,\n  contentQueries: function CdkMenuBase_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, CdkMenuItem, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.items = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"menu\"],\n  hostVars: 4,\n  hostBindings: function CdkMenuBase_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focus\", function CdkMenuBase_focus_HostBindingHandler() {\n        return ctx.focusFirstItem();\n      })(\"focusin\", function CdkMenuBase_focusin_HostBindingHandler() {\n        return ctx.menuStack.setHasFocus(true);\n      })(\"focusout\", function CdkMenuBase_focusout_HostBindingHandler() {\n        return ctx.menuStack.setHasFocus(false);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"tabindex\", ctx._getTabIndex())(\"id\", ctx.id);\n      i0.ɵɵattribute(\"aria-orientation\", ctx.orientation)(\"data-cdk-menu-stack-id\", ctx.menuStack.id);\n    }\n  },\n  inputs: {\n    id: \"id\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkMenuBase, [{\n    type: Directive,\n    args: [{\n      host: {\n        'role': 'menu',\n        'class': '',\n        '[tabindex]': '_getTabIndex()',\n        '[id]': 'id',\n        '[attr.aria-orientation]': 'orientation',\n        '[attr.data-cdk-menu-stack-id]': 'menuStack.id',\n        '(focus)': 'focusFirstItem()',\n        '(focusin)': 'menuStack.setHasFocus(true)',\n        '(focusout)': 'menuStack.setHasFocus(false)'\n      }\n    }]\n  }], null, {\n    id: [{\n      type: Input\n    }],\n    items: [{\n      type: ContentChildren,\n      args: [CdkMenuItem, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n\n/**\n * Directive which configures the element as a Menu which should contain child elements marked as\n * CdkMenuItem or CdkMenuGroup. Sets the appropriate role and aria-attributes for a menu and\n * contains accessible keyboard and mouse handling logic.\n *\n * It also acts as a RadioGroup for elements marked with role `menuitemradio`.\n */\nclass CdkMenu extends CdkMenuBase {\n  constructor() {\n    super();\n    this._parentTrigger = inject(MENU_TRIGGER, {\n      optional: true\n    });\n    /** Event emitted when the menu is closed. */\n    this.closed = new EventEmitter();\n    /** The direction items in the menu flow. */\n    this.orientation = 'vertical';\n    /** Whether the menu is displayed inline (i.e. always present vs a conditional popup that the user triggers with a trigger element). */\n    this.isInline = !this._parentTrigger;\n    this.destroyed.subscribe(this.closed);\n    this._parentTrigger?.registerChildMenu(this);\n  }\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n    this._subscribeToMenuStackEmptied();\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.closed.complete();\n  }\n  /**\n   * Handle keyboard events for the Menu.\n   * @param event The keyboard event to be handled.\n   */\n  _handleKeyEvent(event) {\n    const keyManager = this.keyManager;\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n      case RIGHT_ARROW:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          keyManager.setFocusOrigin('keyboard');\n          keyManager.onKeydown(event);\n        }\n        break;\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.menuStack.close(this, {\n            focusNextOnEmpty: 2 /* FocusNext.currentItem */,\n            focusParentTrigger: true\n          });\n        }\n        break;\n      case TAB:\n        if (!hasModifierKey(event, 'altKey', 'metaKey', 'ctrlKey')) {\n          this.menuStack.closeAll({\n            focusParentTrigger: true\n          });\n        }\n        break;\n      default:\n        keyManager.onKeydown(event);\n    }\n  }\n  /**\n   * Set focus the either the current, previous or next item based on the FocusNext event.\n   * @param focusNext The element to focus.\n   */\n  _toggleMenuFocus(focusNext) {\n    const keyManager = this.keyManager;\n    switch (focusNext) {\n      case 0 /* FocusNext.nextItem */:\n        keyManager.setFocusOrigin('keyboard');\n        keyManager.setNextItemActive();\n        break;\n      case 1 /* FocusNext.previousItem */:\n        keyManager.setFocusOrigin('keyboard');\n        keyManager.setPreviousItemActive();\n        break;\n      case 2 /* FocusNext.currentItem */:\n        if (keyManager.activeItem) {\n          keyManager.setFocusOrigin('keyboard');\n          keyManager.setActiveItem(keyManager.activeItem);\n        }\n        break;\n    }\n  }\n  /** Subscribe to the MenuStack emptied events. */\n  _subscribeToMenuStackEmptied() {\n    this.menuStack.emptied.pipe(takeUntil(this.destroyed)).subscribe(event => this._toggleMenuFocus(event));\n  }\n}\nCdkMenu.ɵfac = function CdkMenu_Factory(t) {\n  return new (t || CdkMenu)();\n};\nCdkMenu.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkMenu,\n  selectors: [[\"\", \"cdkMenu\", \"\"]],\n  hostAttrs: [\"role\", \"menu\", 1, \"cdk-menu\"],\n  hostVars: 2,\n  hostBindings: function CdkMenu_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function CdkMenu_keydown_HostBindingHandler($event) {\n        return ctx._handleKeyEvent($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"cdk-menu-inline\", ctx.isInline);\n    }\n  },\n  outputs: {\n    closed: \"closed\"\n  },\n  exportAs: [\"cdkMenu\"],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkMenuGroup,\n    useExisting: CdkMenu\n  }, {\n    provide: CDK_MENU,\n    useExisting: CdkMenu\n  }, PARENT_OR_NEW_INLINE_MENU_STACK_PROVIDER('vertical')]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkMenu, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkMenu]',\n      exportAs: 'cdkMenu',\n      standalone: true,\n      host: {\n        'role': 'menu',\n        'class': 'cdk-menu',\n        '[class.cdk-menu-inline]': 'isInline',\n        '(keydown)': '_handleKeyEvent($event)'\n      },\n      providers: [{\n        provide: CdkMenuGroup,\n        useExisting: CdkMenu\n      }, {\n        provide: CDK_MENU,\n        useExisting: CdkMenu\n      }, PARENT_OR_NEW_INLINE_MENU_STACK_PROVIDER('vertical')]\n    }]\n  }], function () {\n    return [];\n  }, {\n    closed: [{\n      type: Output\n    }]\n  });\n})();\n\n/**\n * Directive applied to an element which configures it as a MenuBar by setting the appropriate\n * role, aria attributes, and accessible keyboard and mouse handling logic. The component that\n * this directive is applied to should contain components marked with CdkMenuItem.\n *\n */\nclass CdkMenuBar extends CdkMenuBase {\n  constructor() {\n    super(...arguments);\n    /** The direction items in the menu flow. */\n    this.orientation = 'horizontal';\n    /** Whether the menu is displayed inline (i.e. always present vs a conditional popup that the user triggers with a trigger element). */\n    this.isInline = true;\n  }\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n    this._subscribeToMenuStackEmptied();\n  }\n  /**\n   * Handle keyboard events for the Menu.\n   * @param event The keyboard event to be handled.\n   */\n  _handleKeyEvent(event) {\n    const keyManager = this.keyManager;\n    switch (event.keyCode) {\n      case UP_ARROW:\n      case DOWN_ARROW:\n      case LEFT_ARROW:\n      case RIGHT_ARROW:\n        if (!hasModifierKey(event)) {\n          const horizontalArrows = event.keyCode === LEFT_ARROW || event.keyCode === RIGHT_ARROW;\n          // For a horizontal menu if the left/right keys were clicked, or a vertical menu if the\n          // up/down keys were clicked: if the current menu is open, close it then focus and open the\n          // next  menu.\n          if (horizontalArrows) {\n            event.preventDefault();\n            const prevIsOpen = keyManager.activeItem?.isMenuOpen();\n            keyManager.activeItem?.getMenuTrigger()?.close();\n            keyManager.setFocusOrigin('keyboard');\n            keyManager.onKeydown(event);\n            if (prevIsOpen) {\n              keyManager.activeItem?.getMenuTrigger()?.open();\n            }\n          }\n        }\n        break;\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          keyManager.activeItem?.getMenuTrigger()?.close();\n        }\n        break;\n      case TAB:\n        if (!hasModifierKey(event, 'altKey', 'metaKey', 'ctrlKey')) {\n          keyManager.activeItem?.getMenuTrigger()?.close();\n        }\n        break;\n      default:\n        keyManager.onKeydown(event);\n    }\n  }\n  /**\n   * Set focus to either the current, previous or next item based on the FocusNext event, then\n   * open the previous or next item.\n   * @param focusNext The element to focus.\n   */\n  _toggleOpenMenu(focusNext) {\n    const keyManager = this.keyManager;\n    switch (focusNext) {\n      case 0 /* FocusNext.nextItem */:\n        keyManager.setFocusOrigin('keyboard');\n        keyManager.setNextItemActive();\n        keyManager.activeItem?.getMenuTrigger()?.open();\n        break;\n      case 1 /* FocusNext.previousItem */:\n        keyManager.setFocusOrigin('keyboard');\n        keyManager.setPreviousItemActive();\n        keyManager.activeItem?.getMenuTrigger()?.open();\n        break;\n      case 2 /* FocusNext.currentItem */:\n        if (keyManager.activeItem) {\n          keyManager.setFocusOrigin('keyboard');\n          keyManager.setActiveItem(keyManager.activeItem);\n        }\n        break;\n    }\n  }\n  /** Subscribe to the MenuStack emptied events. */\n  _subscribeToMenuStackEmptied() {\n    this.menuStack?.emptied.pipe(takeUntil(this.destroyed)).subscribe(event => this._toggleOpenMenu(event));\n  }\n}\nCdkMenuBar.ɵfac = /* @__PURE__ */function () {\n  let ɵCdkMenuBar_BaseFactory;\n  return function CdkMenuBar_Factory(t) {\n    return (ɵCdkMenuBar_BaseFactory || (ɵCdkMenuBar_BaseFactory = i0.ɵɵgetInheritedFactory(CdkMenuBar)))(t || CdkMenuBar);\n  };\n}();\nCdkMenuBar.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkMenuBar,\n  selectors: [[\"\", \"cdkMenuBar\", \"\"]],\n  hostAttrs: [\"role\", \"menubar\", 1, \"cdk-menu-bar\"],\n  hostBindings: function CdkMenuBar_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function CdkMenuBar_keydown_HostBindingHandler($event) {\n        return ctx._handleKeyEvent($event);\n      });\n    }\n  },\n  exportAs: [\"cdkMenuBar\"],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkMenuGroup,\n    useExisting: CdkMenuBar\n  }, {\n    provide: CDK_MENU,\n    useExisting: CdkMenuBar\n  }, {\n    provide: MENU_STACK,\n    useFactory: () => MenuStack.inline('horizontal')\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkMenuBar, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkMenuBar]',\n      exportAs: 'cdkMenuBar',\n      standalone: true,\n      host: {\n        'role': 'menubar',\n        'class': 'cdk-menu-bar',\n        '(keydown)': '_handleKeyEvent($event)'\n      },\n      providers: [{\n        provide: CdkMenuGroup,\n        useExisting: CdkMenuBar\n      }, {\n        provide: CDK_MENU,\n        useExisting: CdkMenuBar\n      }, {\n        provide: MENU_STACK,\n        useFactory: () => MenuStack.inline('horizontal')\n      }]\n    }]\n  }], null, null);\n})();\n\n/** Base class providing checked state for selectable MenuItems. */\nclass CdkMenuItemSelectable extends CdkMenuItem {\n  constructor() {\n    super(...arguments);\n    this._checked = false;\n    /** Whether the item should close the menu if triggered by the spacebar. */\n    this.closeOnSpacebarTrigger = false;\n  }\n  /** Whether the element is checked */\n  get checked() {\n    return this._checked;\n  }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n  }\n}\nCdkMenuItemSelectable.ɵfac = /* @__PURE__ */function () {\n  let ɵCdkMenuItemSelectable_BaseFactory;\n  return function CdkMenuItemSelectable_Factory(t) {\n    return (ɵCdkMenuItemSelectable_BaseFactory || (ɵCdkMenuItemSelectable_BaseFactory = i0.ɵɵgetInheritedFactory(CdkMenuItemSelectable)))(t || CdkMenuItemSelectable);\n  };\n}();\nCdkMenuItemSelectable.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkMenuItemSelectable,\n  hostVars: 2,\n  hostBindings: function CdkMenuItemSelectable_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-checked\", !!ctx.checked)(\"aria-disabled\", ctx.disabled || null);\n    }\n  },\n  inputs: {\n    checked: [\"cdkMenuItemChecked\", \"checked\"]\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkMenuItemSelectable, [{\n    type: Directive,\n    args: [{\n      host: {\n        '[attr.aria-checked]': '!!checked',\n        '[attr.aria-disabled]': 'disabled || null'\n      }\n    }]\n  }], null, {\n    checked: [{\n      type: Input,\n      args: ['cdkMenuItemChecked']\n    }]\n  });\n})();\n\n/** Counter used to set a unique id and name for a selectable item */\nlet nextId = 0;\n/**\n * A directive providing behavior for the \"menuitemradio\" ARIA role, which behaves similarly to\n * a conventional radio-button. Any sibling `CdkMenuItemRadio` instances within the same `CdkMenu`\n * or `CdkMenuGroup` comprise a radio group with unique selection enforced.\n */\nclass CdkMenuItemRadio extends CdkMenuItemSelectable {\n  constructor() {\n    super();\n    /** The unique selection dispatcher for this radio's `CdkMenuGroup`. */\n    this._selectionDispatcher = inject(UniqueSelectionDispatcher);\n    /** An ID to identify this radio item to the `UniqueSelectionDispatcher`. */\n    this._id = `${nextId++}`;\n    this._registerDispatcherListener();\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._removeDispatcherListener();\n  }\n  /**\n   * Toggles the checked state of the radio-button.\n   * @param options Options the configure how the item is triggered\n   *   - keepOpen: specifies that the menu should be kept open after triggering the item.\n   */\n  trigger(options) {\n    super.trigger(options);\n    if (!this.disabled) {\n      this._selectionDispatcher.notify(this._id, '');\n    }\n  }\n  /** Configure the unique selection dispatcher listener in order to toggle the checked state  */\n  _registerDispatcherListener() {\n    this._removeDispatcherListener = this._selectionDispatcher.listen(id => {\n      this.checked = this._id === id;\n    });\n  }\n}\nCdkMenuItemRadio.ɵfac = function CdkMenuItemRadio_Factory(t) {\n  return new (t || CdkMenuItemRadio)();\n};\nCdkMenuItemRadio.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkMenuItemRadio,\n  selectors: [[\"\", \"cdkMenuItemRadio\", \"\"]],\n  hostAttrs: [\"role\", \"menuitemradio\"],\n  hostVars: 2,\n  hostBindings: function CdkMenuItemRadio_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"cdk-menu-item-radio\", true);\n    }\n  },\n  exportAs: [\"cdkMenuItemRadio\"],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkMenuItemSelectable,\n    useExisting: CdkMenuItemRadio\n  }, {\n    provide: CdkMenuItem,\n    useExisting: CdkMenuItemSelectable\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkMenuItemRadio, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkMenuItemRadio]',\n      exportAs: 'cdkMenuItemRadio',\n      standalone: true,\n      host: {\n        'role': 'menuitemradio',\n        '[class.cdk-menu-item-radio]': 'true'\n      },\n      providers: [{\n        provide: CdkMenuItemSelectable,\n        useExisting: CdkMenuItemRadio\n      }, {\n        provide: CdkMenuItem,\n        useExisting: CdkMenuItemSelectable\n      }]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\n/**\n * A directive providing behavior for the \"menuitemcheckbox\" ARIA role, which behaves similarly to a\n * conventional checkbox.\n */\nclass CdkMenuItemCheckbox extends CdkMenuItemSelectable {\n  /**\n   * Toggle the checked state of the checkbox.\n   * @param options Options the configure how the item is triggered\n   *   - keepOpen: specifies that the menu should be kept open after triggering the item.\n   */\n  trigger(options) {\n    super.trigger(options);\n    if (!this.disabled) {\n      this.checked = !this.checked;\n    }\n  }\n}\nCdkMenuItemCheckbox.ɵfac = /* @__PURE__ */function () {\n  let ɵCdkMenuItemCheckbox_BaseFactory;\n  return function CdkMenuItemCheckbox_Factory(t) {\n    return (ɵCdkMenuItemCheckbox_BaseFactory || (ɵCdkMenuItemCheckbox_BaseFactory = i0.ɵɵgetInheritedFactory(CdkMenuItemCheckbox)))(t || CdkMenuItemCheckbox);\n  };\n}();\nCdkMenuItemCheckbox.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkMenuItemCheckbox,\n  selectors: [[\"\", \"cdkMenuItemCheckbox\", \"\"]],\n  hostAttrs: [\"role\", \"menuitemcheckbox\"],\n  hostVars: 2,\n  hostBindings: function CdkMenuItemCheckbox_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"cdk-menu-item-checkbox\", true);\n    }\n  },\n  exportAs: [\"cdkMenuItemCheckbox\"],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkMenuItemSelectable,\n    useExisting: CdkMenuItemCheckbox\n  }, {\n    provide: CdkMenuItem,\n    useExisting: CdkMenuItemSelectable\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkMenuItemCheckbox, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkMenuItemCheckbox]',\n      exportAs: 'cdkMenuItemCheckbox',\n      standalone: true,\n      host: {\n        'role': 'menuitemcheckbox',\n        '[class.cdk-menu-item-checkbox]': 'true'\n      },\n      providers: [{\n        provide: CdkMenuItemSelectable,\n        useExisting: CdkMenuItemCheckbox\n      }, {\n        provide: CdkMenuItem,\n        useExisting: CdkMenuItemSelectable\n      }]\n    }]\n  }], null, null);\n})();\n\n/** The preferred menu positions for the context menu. */\nconst CONTEXT_MENU_POSITIONS = STANDARD_DROPDOWN_BELOW_POSITIONS.map(position => {\n  // In cases where the first menu item in the context menu is a trigger the submenu opens on a\n  // hover event. We offset the context menu 2px by default to prevent this from occurring.\n  const offsetX = position.overlayX === 'start' ? 2 : -2;\n  const offsetY = position.overlayY === 'top' ? 2 : -2;\n  return {\n    ...position,\n    offsetX,\n    offsetY\n  };\n});\n/** Tracks the last open context menu trigger across the entire application. */\nclass ContextMenuTracker {\n  /**\n   * Close the previous open context menu and set the given one as being open.\n   * @param trigger The trigger for the currently open Context Menu.\n   */\n  update(trigger) {\n    if (ContextMenuTracker._openContextMenuTrigger !== trigger) {\n      ContextMenuTracker._openContextMenuTrigger?.close();\n      ContextMenuTracker._openContextMenuTrigger = trigger;\n    }\n  }\n}\nContextMenuTracker.ɵfac = function ContextMenuTracker_Factory(t) {\n  return new (t || ContextMenuTracker)();\n};\nContextMenuTracker.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ContextMenuTracker,\n  factory: ContextMenuTracker.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ContextMenuTracker, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * A directive that opens a menu when a user right-clicks within its host element.\n * It is aware of nested context menus and will trigger only the lowest level non-disabled context menu.\n */\nclass CdkContextMenuTrigger extends CdkMenuTriggerBase {\n  /** Whether the context menu is disabled. */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  constructor() {\n    super();\n    /** The CDK overlay service. */\n    this._overlay = inject(Overlay);\n    /** The directionality of the page. */\n    this._directionality = inject(Directionality, {\n      optional: true\n    });\n    /** The app's context menu tracking registry */\n    this._contextMenuTracker = inject(ContextMenuTracker);\n    this._disabled = false;\n    this._setMenuStackCloseListener();\n  }\n  /**\n   * Open the attached menu at the specified location.\n   * @param coordinates where to open the context menu\n   */\n  open(coordinates) {\n    this._open(coordinates, false);\n  }\n  /** Close the currently opened context menu. */\n  close() {\n    this.menuStack.closeAll();\n  }\n  /**\n   * Open the context menu and closes any previously open menus.\n   * @param event the mouse event which opens the context menu.\n   */\n  _openOnContextMenu(event) {\n    if (!this.disabled) {\n      // Prevent the native context menu from opening because we're opening a custom one.\n      event.preventDefault();\n      // Stop event propagation to ensure that only the closest enabled context menu opens.\n      // Otherwise, any context menus attached to containing elements would *also* open,\n      // resulting in multiple stacked context menus being displayed.\n      event.stopPropagation();\n      this._contextMenuTracker.update(this);\n      this._open({\n        x: event.clientX,\n        y: event.clientY\n      }, true);\n      // A context menu can be triggered via a mouse right click or a keyboard shortcut.\n      if (event.button === 2) {\n        this.childMenu?.focusFirstItem('mouse');\n      } else if (event.button === 0) {\n        this.childMenu?.focusFirstItem('keyboard');\n      } else {\n        this.childMenu?.focusFirstItem('program');\n      }\n    }\n  }\n  /**\n   * Get the configuration object used to create the overlay.\n   * @param coordinates the location to place the opened menu\n   */\n  _getOverlayConfig(coordinates) {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPositionStrategy(coordinates),\n      scrollStrategy: this._overlay.scrollStrategies.reposition(),\n      direction: this._directionality || undefined\n    });\n  }\n  /**\n   * Get the position strategy for the overlay which specifies where to place the menu.\n   * @param coordinates the location to place the opened menu\n   */\n  _getOverlayPositionStrategy(coordinates) {\n    return this._overlay.position().flexibleConnectedTo(coordinates).withLockedPosition().withGrowAfterOpen().withPositions(this.menuPosition ?? CONTEXT_MENU_POSITIONS);\n  }\n  /** Subscribe to the menu stack close events and close this menu when requested. */\n  _setMenuStackCloseListener() {\n    this.menuStack.closed.pipe(takeUntil(this.destroyed)).subscribe(({\n      item\n    }) => {\n      if (item === this.childMenu && this.isOpen()) {\n        this.closed.next();\n        this.overlayRef.detach();\n      }\n    });\n  }\n  /**\n   * Subscribe to the overlays outside pointer events stream and handle closing out the stack if a\n   * click occurs outside the menus.\n   * @param ignoreFirstAuxClick Whether to ignore the first auxclick event outside the menu.\n   */\n  _subscribeToOutsideClicks(ignoreFirstAuxClick) {\n    if (this.overlayRef) {\n      let outsideClicks = this.overlayRef.outsidePointerEvents();\n      // If the menu was triggered by the `contextmenu` event, skip the first `auxclick` event\n      // because it fires when the mouse is released on the same click that opened the menu.\n      if (ignoreFirstAuxClick) {\n        const [auxClicks, nonAuxClicks] = partition(outsideClicks, ({\n          type\n        }) => type === 'auxclick');\n        outsideClicks = merge(nonAuxClicks, auxClicks.pipe(skip(1)));\n      }\n      outsideClicks.pipe(takeUntil(this.stopOutsideClicksListener)).subscribe(event => {\n        if (!this.isElementInsideMenuStack(_getEventTarget(event))) {\n          this.menuStack.closeAll();\n        }\n      });\n    }\n  }\n  /**\n   * Open the attached menu at the specified location.\n   * @param coordinates where to open the context menu\n   * @param ignoreFirstOutsideAuxClick Whether to ignore the first auxclick outside the menu after opening.\n   */\n  _open(coordinates, ignoreFirstOutsideAuxClick) {\n    if (this.disabled) {\n      return;\n    }\n    if (this.isOpen()) {\n      // since we're moving this menu we need to close any submenus first otherwise they end up\n      // disconnected from this one.\n      this.menuStack.closeSubMenuOf(this.childMenu);\n      this.overlayRef.getConfig().positionStrategy.setOrigin(coordinates);\n      this.overlayRef.updatePosition();\n    } else {\n      this.opened.next();\n      if (this.overlayRef) {\n        this.overlayRef.getConfig().positionStrategy.setOrigin(coordinates);\n        this.overlayRef.updatePosition();\n      } else {\n        this.overlayRef = this._overlay.create(this._getOverlayConfig(coordinates));\n      }\n      this.overlayRef.attach(this.getMenuContentPortal());\n      this._subscribeToOutsideClicks(ignoreFirstOutsideAuxClick);\n    }\n  }\n}\nCdkContextMenuTrigger.ɵfac = function CdkContextMenuTrigger_Factory(t) {\n  return new (t || CdkContextMenuTrigger)();\n};\nCdkContextMenuTrigger.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkContextMenuTrigger,\n  selectors: [[\"\", \"cdkContextMenuTriggerFor\", \"\"]],\n  hostVars: 1,\n  hostBindings: function CdkContextMenuTrigger_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"contextmenu\", function CdkContextMenuTrigger_contextmenu_HostBindingHandler($event) {\n        return ctx._openOnContextMenu($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"data-cdk-menu-stack-id\", null);\n    }\n  },\n  inputs: {\n    menuTemplateRef: [\"cdkContextMenuTriggerFor\", \"menuTemplateRef\"],\n    menuPosition: [\"cdkContextMenuPosition\", \"menuPosition\"],\n    menuData: [\"cdkContextMenuTriggerData\", \"menuData\"],\n    disabled: [\"cdkContextMenuDisabled\", \"disabled\"]\n  },\n  outputs: {\n    opened: \"cdkContextMenuOpened\",\n    closed: \"cdkContextMenuClosed\"\n  },\n  exportAs: [\"cdkContextMenuTriggerFor\"],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MENU_TRIGGER,\n    useExisting: CdkContextMenuTrigger\n  }, {\n    provide: MENU_STACK,\n    useClass: MenuStack\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkContextMenuTrigger, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkContextMenuTriggerFor]',\n      exportAs: 'cdkContextMenuTriggerFor',\n      standalone: true,\n      host: {\n        '[attr.data-cdk-menu-stack-id]': 'null',\n        '(contextmenu)': '_openOnContextMenu($event)'\n      },\n      inputs: ['menuTemplateRef: cdkContextMenuTriggerFor', 'menuPosition: cdkContextMenuPosition', 'menuData: cdkContextMenuTriggerData'],\n      outputs: ['opened: cdkContextMenuOpened', 'closed: cdkContextMenuClosed'],\n      providers: [{\n        provide: MENU_TRIGGER,\n        useExisting: CdkContextMenuTrigger\n      }, {\n        provide: MENU_STACK,\n        useClass: MenuStack\n      }]\n    }]\n  }], function () {\n    return [];\n  }, {\n    disabled: [{\n      type: Input,\n      args: ['cdkContextMenuDisabled']\n    }]\n  });\n})();\nconst MENU_DIRECTIVES = [CdkMenuBar, CdkMenu, CdkMenuItem, CdkMenuItemRadio, CdkMenuItemCheckbox, CdkMenuTrigger, CdkMenuGroup, CdkContextMenuTrigger, CdkTargetMenuAim];\n/** Module that declares components and directives for the CDK menu. */\nclass CdkMenuModule {}\nCdkMenuModule.ɵfac = function CdkMenuModule_Factory(t) {\n  return new (t || CdkMenuModule)();\n};\nCdkMenuModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CdkMenuModule\n});\nCdkMenuModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [OverlayModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkMenuModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, ...MENU_DIRECTIVES],\n      exports: MENU_DIRECTIVES\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_MENU, CdkContextMenuTrigger, CdkMenu, CdkMenuBar, CdkMenuBase, CdkMenuGroup, CdkMenuItem, CdkMenuItemCheckbox, CdkMenuItemRadio, CdkMenuItemSelectable, CdkMenuModule, CdkMenuTrigger, CdkMenuTriggerBase, CdkTargetMenuAim, ContextMenuTracker, MENU_AIM, MENU_STACK, MENU_TRIGGER, MenuStack, PARENT_OR_NEW_INLINE_MENU_STACK_PROVIDER, PARENT_OR_NEW_MENU_STACK_PROVIDER, PointerFocusTracker, TargetMenuAim };","map":{"version":3,"names":["i0","Directive","InjectionToken","Optional","SkipSelf","Inject","Injectable","inject","Injector","ViewContainerRef","EventEmitter","NgZone","ElementRef","Input","Output","ContentChildren","NgModule","Overlay","OverlayConfig","STANDARD_DROPDOWN_BELOW_POSITIONS","STANDARD_DROPDOWN_ADJACENT_POSITIONS","OverlayModule","UP_ARROW","hasModifierKey","DOWN_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","TAB","ESCAPE","startWith","debounceTime","distinctUntilChanged","filter","takeUntil","mergeMap","mapTo","mergeAll","switchMap","skip","UniqueSelectionDispatcher","Subject","merge","fromEvent","defer","partition","TemplatePortal","InputModalityDetector","FocusKeyManager","coerceBooleanProperty","Directionality","_getEventTarget","CdkMenuGroup","ɵfac","CdkMenuGroup_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","exportAs","standalone","features","ɵɵProvidersFeature","provide","useClass","ngDevMode","ɵsetClassMetadata","args","selector","host","providers","CDK_MENU","MENU_STACK","PARENT_OR_NEW_MENU_STACK_PROVIDER","deps","useFactory","parentMenuStack","MenuStack","PARENT_OR_NEW_INLINE_MENU_STACK_PROVIDER","orientation","inline","nextId$2","constructor","id","_elements","_close","_empty","_hasFocus","closed","hasFocus","pipe","emptied","_inlineMenuOrientation","stack","push","menu","close","lastItem","options","focusNextOnEmpty","focusParentTrigger","indexOf","poppedElement","pop","next","item","isEmpty","closeSubMenuOf","removed","peek","closeAll","menuStackItem","length","hasInlineMenu","inlineMenuOrientation","setHasFocus","MenuStack_Factory","ɵprov","ɵɵdefineInjectable","token","factory","MENU_TRIGGER","CdkMenuTriggerBase","injector","viewContainerRef","menuStack","opened","overlayRef","destroyed","stopOutsideClicksListener","ngOnDestroy","_destroyOverlay","complete","isOpen","hasAttached","registerChildMenu","child","childMenu","getMenuContentPortal","hasMenuContentChanged","menuTemplateRef","_menuPortal","templateRef","menuData","_getChildMenuInjector","isElementInsideMenuStack","element","el","parentElement","getAttribute","dispose","_childMenuInjector","create","useValue","parent","CdkMenuTriggerBase_Factory","hostVars","hostBindings","CdkMenuTriggerBase_HostBindings","rf","ctx","ɵɵattribute","throwMissingPointerFocusTracker","Error","throwMissingMenuReference","MENU_AIM","MOUSE_MOVE_SAMPLE_FREQUENCY","NUM_POINTS","CLOSE_DELAY","getSlope","a","b","y","x","getYIntercept","point","slope","isWithinSubmenu","submenuPoints","m","left","right","top","bottom","TargetMenuAim","_ngZone","_points","_destroyed","initialize","pointerTracker","_menu","_pointerTracker","_subscribeToMouseMoves","toggle","doToggle","_checkConfigured","siblingItemIsWaiting","_timeoutId","hasPoints","_isMovingToSubmenu","_startTimeout","timeoutId","setTimeout","activeElement","_getSubmenuBounds","numMoving","currPoint","i","previous","Math","floor","previousElement","getMenu","nativeElement","getBoundingClientRect","runOutsideAngular","_","index","subscribe","event","clientX","clientY","shift","TargetMenuAim_Factory","CdkTargetMenuAim","CdkTargetMenuAim_Factory","CdkMenuTrigger","_elementRef","_overlay","_directionality","optional","_inputModalityDetector","_parentMenu","_menuAim","_setRole","_registerCloseHandler","_subscribeToMenuStackClosed","_subscribeToMouseEnter","_subscribeToMenuStackHasFocus","_setType","open","_getOverlayConfig","attach","_subscribeToOutsideClicks","detach","_closeSiblingTriggers","_toggleOnKeydown","isParentVertical","keyCode","focusFirstItem","value","preventDefault","focusLastItem","_handleClick","mostRecentModality","_setHasFocus","toggleMenus","run","isParentMenuBar","positionStrategy","_getOverlayPositionStrategy","scrollStrategy","scrollStrategies","reposition","direction","undefined","position","flexibleConnectedTo","withLockedPosition","withGrowAfterOpen","withPositions","_getOverlayPositions","menuPosition","outsidePointerEvents","target","contains","focus","setAttribute","nodeName","CdkMenuTrigger_Factory","CdkMenuTrigger_HostBindings","ɵɵlistener","CdkMenuTrigger_focusin_HostBindingHandler","CdkMenuTrigger_focusout_HostBindingHandler","CdkMenuTrigger_keydown_HostBindingHandler","$event","CdkMenuTrigger_click_HostBindingHandler","inputs","outputs","useExisting","ɵɵInheritDefinitionFeature","CdkMenuItem","disabled","_disabled","hasMenu","_menuTrigger","_dir","_menuStack","self","triggered","_tabindex","closeOnSpacebarTrigger","_setupMouseEnter","_isStandaloneItem","trigger","keepOpen","isMenuOpen","getMenuTrigger","getLabel","typeaheadLabel","textContent","trim","_resetTabIndex","_setTabIndex","_onKeydown","_isParentVertical","_forwardArrowPressed","_backArrowPressed","parentMenu","closeOpenSiblings","CdkMenuItem_Factory","CdkMenuItem_HostBindings","CdkMenuItem_blur_HostBindingHandler","CdkMenuItem_focus_HostBindingHandler","CdkMenuItem_click_HostBindingHandler","CdkMenuItem_keydown_HostBindingHandler","ɵɵhostProperty","PointerFocusTracker","_items","entered","_getItemPointerEntries","exited","_getItemPointerExits","destroy","changes","list","map","nextId$1","CdkMenuBase","arguments","ngZone","menuAim","dir","isInline","_menuStackHasFocus","ngAfterContentInit","_setKeyManager","_subscribeToMenuOpen","_setUpPointerTracker","keyManager","focusOrigin","setFocusOrigin","setFirstItemActive","setLastItemActive","_getTabIndex","tabindexIfInline","closeOpenMenu","triggerItem","setActiveItem","items","withWrap","withTypeAhead","withHomeAndEnd","withHorizontalOrientation","withVerticalOrientation","exitCondition","ɵCdkMenuBase_BaseFactory","CdkMenuBase_Factory","ɵɵgetInheritedFactory","contentQueries","CdkMenuBase_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","CdkMenuBase_HostBindings","CdkMenuBase_focus_HostBindingHandler","CdkMenuBase_focusin_HostBindingHandler","CdkMenuBase_focusout_HostBindingHandler","descendants","CdkMenu","_parentTrigger","_subscribeToMenuStackEmptied","_handleKeyEvent","onKeydown","_toggleMenuFocus","focusNext","setNextItemActive","setPreviousItemActive","activeItem","CdkMenu_Factory","CdkMenu_HostBindings","CdkMenu_keydown_HostBindingHandler","ɵɵclassProp","CdkMenuBar","horizontalArrows","prevIsOpen","_toggleOpenMenu","ɵCdkMenuBar_BaseFactory","CdkMenuBar_Factory","CdkMenuBar_HostBindings","CdkMenuBar_keydown_HostBindingHandler","CdkMenuItemSelectable","_checked","checked","ɵCdkMenuItemSelectable_BaseFactory","CdkMenuItemSelectable_Factory","CdkMenuItemSelectable_HostBindings","nextId","CdkMenuItemRadio","_selectionDispatcher","_id","_registerDispatcherListener","_removeDispatcherListener","notify","listen","CdkMenuItemRadio_Factory","CdkMenuItemRadio_HostBindings","CdkMenuItemCheckbox","ɵCdkMenuItemCheckbox_BaseFactory","CdkMenuItemCheckbox_Factory","CdkMenuItemCheckbox_HostBindings","CONTEXT_MENU_POSITIONS","offsetX","overlayX","offsetY","overlayY","ContextMenuTracker","update","_openContextMenuTrigger","ContextMenuTracker_Factory","providedIn","CdkContextMenuTrigger","_contextMenuTracker","_setMenuStackCloseListener","coordinates","_open","_openOnContextMenu","stopPropagation","button","ignoreFirstAuxClick","outsideClicks","auxClicks","nonAuxClicks","ignoreFirstOutsideAuxClick","getConfig","setOrigin","updatePosition","CdkContextMenuTrigger_Factory","CdkContextMenuTrigger_HostBindings","CdkContextMenuTrigger_contextmenu_HostBindingHandler","MENU_DIRECTIVES","CdkMenuModule","CdkMenuModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports"],"sources":["C:/Users/Asus/source/repos/Frontend_Proyect_Personal/ESTREMOR/node_modules/@angular/cdk/fesm2022/menu.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, InjectionToken, Optional, SkipSelf, Inject, Injectable, inject, Injector, ViewContainerRef, EventEmitter, NgZone, ElementRef, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport { Overlay, OverlayConfig, STANDARD_DROPDOWN_BELOW_POSITIONS, STANDARD_DROPDOWN_ADJACENT_POSITIONS, OverlayModule } from '@angular/cdk/overlay';\nimport { UP_ARROW, hasModifierKey, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, TAB, ESCAPE } from '@angular/cdk/keycodes';\nimport { startWith, debounceTime, distinctUntilChanged, filter, takeUntil, mergeMap, mapTo, mergeAll, switchMap, skip } from 'rxjs/operators';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { Subject, merge, fromEvent, defer, partition } from 'rxjs';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { InputModalityDetector, FocusKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { _getEventTarget } from '@angular/cdk/platform';\n\n/**\n * A grouping container for `CdkMenuItemRadio` instances, similar to a `role=\"radiogroup\"` element.\n */\nclass CdkMenuGroup {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkMenuGroup, isStandalone: true, selector: \"[cdkMenuGroup]\", host: { attributes: { \"role\": \"group\" }, classAttribute: \"cdk-menu-group\" }, providers: [{ provide: UniqueSelectionDispatcher, useClass: UniqueSelectionDispatcher }], exportAs: [\"cdkMenuGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkMenuGroup]',\n                    exportAs: 'cdkMenuGroup',\n                    standalone: true,\n                    host: {\n                        'role': 'group',\n                        'class': 'cdk-menu-group',\n                    },\n                    providers: [{ provide: UniqueSelectionDispatcher, useClass: UniqueSelectionDispatcher }],\n                }]\n        }] });\n\n/** Injection token used to return classes implementing the Menu interface */\nconst CDK_MENU = new InjectionToken('cdk-menu');\n\n/** Injection token used for an implementation of MenuStack. */\nconst MENU_STACK = new InjectionToken('cdk-menu-stack');\n/** Provider that provides the parent menu stack, or a new menu stack if there is no parent one. */\nconst PARENT_OR_NEW_MENU_STACK_PROVIDER = {\n    provide: MENU_STACK,\n    deps: [[new Optional(), new SkipSelf(), new Inject(MENU_STACK)]],\n    useFactory: (parentMenuStack) => parentMenuStack || new MenuStack(),\n};\n/** Provider that provides the parent menu stack, or a new inline menu stack if there is no parent one. */\nconst PARENT_OR_NEW_INLINE_MENU_STACK_PROVIDER = (orientation) => ({\n    provide: MENU_STACK,\n    deps: [[new Optional(), new SkipSelf(), new Inject(MENU_STACK)]],\n    useFactory: (parentMenuStack) => parentMenuStack || MenuStack.inline(orientation),\n});\n/** The next available menu stack ID. */\nlet nextId$2 = 0;\n/**\n * MenuStack allows subscribers to listen for close events (when a MenuStackItem is popped off\n * of the stack) in order to perform closing actions. Upon the MenuStack being empty it emits\n * from the `empty` observable specifying the next focus action which the listener should perform\n * as requested by the closer.\n */\nclass MenuStack {\n    constructor() {\n        /** The ID of this menu stack. */\n        this.id = `${nextId$2++}`;\n        /** All MenuStackItems tracked by this MenuStack. */\n        this._elements = [];\n        /** Emits the element which was popped off of the stack when requested by a closer. */\n        this._close = new Subject();\n        /** Emits once the MenuStack has become empty after popping off elements. */\n        this._empty = new Subject();\n        /** Emits whether any menu in the menu stack has focus. */\n        this._hasFocus = new Subject();\n        /** Observable which emits the MenuStackItem which has been requested to close. */\n        this.closed = this._close;\n        /** Observable which emits whether any menu in the menu stack has focus. */\n        this.hasFocus = this._hasFocus.pipe(startWith(false), debounceTime(0), distinctUntilChanged());\n        /**\n         * Observable which emits when the MenuStack is empty after popping off the last element. It\n         * emits a FocusNext event which specifies the action the closer has requested the listener\n         * perform.\n         */\n        this.emptied = this._empty;\n        /**\n         * Whether the inline menu associated with this menu stack is vertical or horizontal.\n         * `null` indicates there is no inline menu associated with this menu stack.\n         */\n        this._inlineMenuOrientation = null;\n    }\n    /** Creates a menu stack that originates from an inline menu. */\n    static inline(orientation) {\n        const stack = new MenuStack();\n        stack._inlineMenuOrientation = orientation;\n        return stack;\n    }\n    /**\n     * Adds an item to the menu stack.\n     * @param menu the MenuStackItem to put on the stack.\n     */\n    push(menu) {\n        this._elements.push(menu);\n    }\n    /**\n     * Pop items off of the stack up to and including `lastItem` and emit each on the close\n     * observable. If the stack is empty or `lastItem` is not on the stack it does nothing.\n     * @param lastItem the last item to pop off the stack.\n     * @param options Options that configure behavior on close.\n     */\n    close(lastItem, options) {\n        const { focusNextOnEmpty, focusParentTrigger } = { ...options };\n        if (this._elements.indexOf(lastItem) >= 0) {\n            let poppedElement;\n            do {\n                poppedElement = this._elements.pop();\n                this._close.next({ item: poppedElement, focusParentTrigger });\n            } while (poppedElement !== lastItem);\n            if (this.isEmpty()) {\n                this._empty.next(focusNextOnEmpty);\n            }\n        }\n    }\n    /**\n     * Pop items off of the stack up to but excluding `lastItem` and emit each on the close\n     * observable. If the stack is empty or `lastItem` is not on the stack it does nothing.\n     * @param lastItem the element which should be left on the stack\n     * @return whether or not an item was removed from the stack\n     */\n    closeSubMenuOf(lastItem) {\n        let removed = false;\n        if (this._elements.indexOf(lastItem) >= 0) {\n            removed = this.peek() !== lastItem;\n            while (this.peek() !== lastItem) {\n                this._close.next({ item: this._elements.pop() });\n            }\n        }\n        return removed;\n    }\n    /**\n     * Pop off all MenuStackItems and emit each one on the `close` observable one by one.\n     * @param options Options that configure behavior on close.\n     */\n    closeAll(options) {\n        const { focusNextOnEmpty, focusParentTrigger } = { ...options };\n        if (!this.isEmpty()) {\n            while (!this.isEmpty()) {\n                const menuStackItem = this._elements.pop();\n                if (menuStackItem) {\n                    this._close.next({ item: menuStackItem, focusParentTrigger });\n                }\n            }\n            this._empty.next(focusNextOnEmpty);\n        }\n    }\n    /** Return true if this stack is empty. */\n    isEmpty() {\n        return !this._elements.length;\n    }\n    /** Return the length of the stack. */\n    length() {\n        return this._elements.length;\n    }\n    /** Get the top most element on the stack. */\n    peek() {\n        return this._elements[this._elements.length - 1];\n    }\n    /** Whether the menu stack is associated with an inline menu. */\n    hasInlineMenu() {\n        return this._inlineMenuOrientation != null;\n    }\n    /** The orientation of the associated inline menu. */\n    inlineMenuOrientation() {\n        return this._inlineMenuOrientation;\n    }\n    /** Sets whether the menu stack contains the focused element. */\n    setHasFocus(hasFocus) {\n        this._hasFocus.next(hasFocus);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MenuStack, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MenuStack }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MenuStack, decorators: [{\n            type: Injectable\n        }] });\n\n/** Injection token used for an implementation of MenuStack. */\nconst MENU_TRIGGER = new InjectionToken('cdk-menu-trigger');\n/**\n * Abstract directive that implements shared logic common to all menu triggers.\n * This class can be extended to create custom menu trigger types.\n */\nclass CdkMenuTriggerBase {\n    constructor() {\n        /** The DI injector for this component. */\n        this.injector = inject(Injector);\n        /** The view container ref for this component */\n        this.viewContainerRef = inject(ViewContainerRef);\n        /** The menu stack in which this menu resides. */\n        this.menuStack = inject(MENU_STACK);\n        /** Emits when the attached menu is requested to open */\n        this.opened = new EventEmitter();\n        /** Emits when the attached menu is requested to close */\n        this.closed = new EventEmitter();\n        /** A reference to the overlay which manages the triggered menu */\n        this.overlayRef = null;\n        /** Emits when this trigger is destroyed. */\n        this.destroyed = new Subject();\n        /** Emits when the outside pointer events listener on the overlay should be stopped. */\n        this.stopOutsideClicksListener = merge(this.closed, this.destroyed);\n    }\n    ngOnDestroy() {\n        this._destroyOverlay();\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n    /** Whether the attached menu is open. */\n    isOpen() {\n        return !!this.overlayRef?.hasAttached();\n    }\n    /** Registers a child menu as having been opened by this trigger. */\n    registerChildMenu(child) {\n        this.childMenu = child;\n    }\n    /**\n     * Get the portal to be attached to the overlay which contains the menu. Allows for the menu\n     * content to change dynamically and be reflected in the application.\n     */\n    getMenuContentPortal() {\n        const hasMenuContentChanged = this.menuTemplateRef !== this._menuPortal?.templateRef;\n        if (this.menuTemplateRef && (!this._menuPortal || hasMenuContentChanged)) {\n            this._menuPortal = new TemplatePortal(this.menuTemplateRef, this.viewContainerRef, this.menuData, this._getChildMenuInjector());\n        }\n        return this._menuPortal;\n    }\n    /**\n     * Whether the given element is inside the scope of this trigger's menu stack.\n     * @param element The element to check.\n     * @return Whether the element is inside the scope of this trigger's menu stack.\n     */\n    isElementInsideMenuStack(element) {\n        for (let el = element; el; el = el?.parentElement ?? null) {\n            if (el.getAttribute('data-cdk-menu-stack-id') === this.menuStack.id) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /** Destroy and unset the overlay reference it if exists */\n    _destroyOverlay() {\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n    }\n    /** Gets the injector to use when creating a child menu. */\n    _getChildMenuInjector() {\n        this._childMenuInjector =\n            this._childMenuInjector ||\n                Injector.create({\n                    providers: [\n                        { provide: MENU_TRIGGER, useValue: this },\n                        { provide: MENU_STACK, useValue: this.menuStack },\n                    ],\n                    parent: this.injector,\n                });\n        return this._childMenuInjector;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuTriggerBase, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkMenuTriggerBase, host: { properties: { \"attr.aria-controls\": \"childMenu?.id\", \"attr.data-cdk-menu-stack-id\": \"menuStack.id\" } }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuTriggerBase, decorators: [{\n            type: Directive,\n            args: [{\n                    host: {\n                        '[attr.aria-controls]': 'childMenu?.id',\n                        '[attr.data-cdk-menu-stack-id]': 'menuStack.id',\n                    },\n                }]\n        }] });\n\n/**\n * Throws an exception when an instance of the PointerFocusTracker is not provided.\n * @docs-private\n */\nfunction throwMissingPointerFocusTracker() {\n    throw Error('expected an instance of PointerFocusTracker to be provided');\n}\n/**\n * Throws an exception when a reference to the parent menu is not provided.\n * @docs-private\n */\nfunction throwMissingMenuReference() {\n    throw Error('expected a reference to the parent menu');\n}\n\n/** Injection token used for an implementation of MenuAim. */\nconst MENU_AIM = new InjectionToken('cdk-menu-aim');\n/** Capture every nth mouse move event. */\nconst MOUSE_MOVE_SAMPLE_FREQUENCY = 3;\n/** The number of mouse move events to track. */\nconst NUM_POINTS = 5;\n/**\n * How long to wait before closing a sibling menu if a user stops short of the submenu they were\n * predicted to go into.\n */\nconst CLOSE_DELAY = 300;\n/** Calculate the slope between point a and b. */\nfunction getSlope(a, b) {\n    return (b.y - a.y) / (b.x - a.x);\n}\n/** Calculate the y intercept for the given point and slope. */\nfunction getYIntercept(point, slope) {\n    return point.y - slope * point.x;\n}\n/**\n * Whether the given mouse trajectory line defined by the slope and y intercept falls within the\n * submenu as defined by `submenuPoints`\n * @param submenuPoints the submenu DOMRect points.\n * @param m the slope of the trajectory line.\n * @param b the y intercept of the trajectory line.\n * @return true if any point on the line falls within the submenu.\n */\nfunction isWithinSubmenu(submenuPoints, m, b) {\n    const { left, right, top, bottom } = submenuPoints;\n    // Check for intersection with each edge of the submenu (left, right, top, bottom)\n    // by fixing one coordinate to that edge's coordinate (either x or y) and checking if the\n    // other coordinate is within bounds.\n    return ((m * left + b >= top && m * left + b <= bottom) ||\n        (m * right + b >= top && m * right + b <= bottom) ||\n        ((top - b) / m >= left && (top - b) / m <= right) ||\n        ((bottom - b) / m >= left && (bottom - b) / m <= right));\n}\n/**\n * TargetMenuAim predicts if a user is moving into a submenu. It calculates the\n * trajectory of the user's mouse movement in the current menu to determine if the\n * mouse is moving towards an open submenu.\n *\n * The determination is made by calculating the slope of the users last NUM_POINTS moves where each\n * pair of points determines if the trajectory line points into the submenu. It uses consensus\n * approach by checking if at least NUM_POINTS / 2 pairs determine that the user is moving towards\n * to submenu.\n */\nclass TargetMenuAim {\n    constructor() {\n        /** The Angular zone. */\n        this._ngZone = inject(NgZone);\n        /** The last NUM_POINTS mouse move events. */\n        this._points = [];\n        /** Emits when this service is destroyed. */\n        this._destroyed = new Subject();\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Set the Menu and its PointerFocusTracker.\n     * @param menu The menu that this menu aim service controls.\n     * @param pointerTracker The `PointerFocusTracker` for the given menu.\n     */\n    initialize(menu, pointerTracker) {\n        this._menu = menu;\n        this._pointerTracker = pointerTracker;\n        this._subscribeToMouseMoves();\n    }\n    /**\n     * Calls the `doToggle` callback when it is deemed that the user is not moving towards\n     * the submenu.\n     * @param doToggle the function called when the user is not moving towards the submenu.\n     */\n    toggle(doToggle) {\n        // If the menu is horizontal the sub-menus open below and there is no risk of premature\n        // closing of any sub-menus therefore we automatically resolve the callback.\n        if (this._menu.orientation === 'horizontal') {\n            doToggle();\n        }\n        this._checkConfigured();\n        const siblingItemIsWaiting = !!this._timeoutId;\n        const hasPoints = this._points.length > 1;\n        if (hasPoints && !siblingItemIsWaiting) {\n            if (this._isMovingToSubmenu()) {\n                this._startTimeout(doToggle);\n            }\n            else {\n                doToggle();\n            }\n        }\n        else if (!siblingItemIsWaiting) {\n            doToggle();\n        }\n    }\n    /**\n     * Start the delayed toggle handler if one isn't running already.\n     *\n     * The delayed toggle handler executes the `doToggle` callback after some period of time iff the\n     * users mouse is on an item in the current menu.\n     *\n     * @param doToggle the function called when the user is not moving towards the submenu.\n     */\n    _startTimeout(doToggle) {\n        // If the users mouse is moving towards a submenu we don't want to immediately resolve.\n        // Wait for some period of time before determining if the previous menu should close in\n        // cases where the user may have moved towards the submenu but stopped on a sibling menu\n        // item intentionally.\n        const timeoutId = setTimeout(() => {\n            // Resolve if the user is currently moused over some element in the root menu\n            if (this._pointerTracker.activeElement && timeoutId === this._timeoutId) {\n                doToggle();\n            }\n            this._timeoutId = null;\n        }, CLOSE_DELAY);\n        this._timeoutId = timeoutId;\n    }\n    /** Whether the user is heading towards the open submenu. */\n    _isMovingToSubmenu() {\n        const submenuPoints = this._getSubmenuBounds();\n        if (!submenuPoints) {\n            return false;\n        }\n        let numMoving = 0;\n        const currPoint = this._points[this._points.length - 1];\n        // start from the second last point and calculate the slope between each point and the last\n        // point.\n        for (let i = this._points.length - 2; i >= 0; i--) {\n            const previous = this._points[i];\n            const slope = getSlope(currPoint, previous);\n            if (isWithinSubmenu(submenuPoints, slope, getYIntercept(currPoint, slope))) {\n                numMoving++;\n            }\n        }\n        return numMoving >= Math.floor(NUM_POINTS / 2);\n    }\n    /** Get the bounding DOMRect for the open submenu. */\n    _getSubmenuBounds() {\n        return this._pointerTracker?.previousElement?.getMenu()?.nativeElement.getBoundingClientRect();\n    }\n    /**\n     * Check if a reference to the PointerFocusTracker and menu element is provided.\n     * @throws an error if neither reference is provided.\n     */\n    _checkConfigured() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._pointerTracker) {\n                throwMissingPointerFocusTracker();\n            }\n            if (!this._menu) {\n                throwMissingMenuReference();\n            }\n        }\n    }\n    /** Subscribe to the root menus mouse move events and update the tracked mouse points. */\n    _subscribeToMouseMoves() {\n        this._ngZone.runOutsideAngular(() => {\n            fromEvent(this._menu.nativeElement, 'mousemove')\n                .pipe(filter((_, index) => index % MOUSE_MOVE_SAMPLE_FREQUENCY === 0), takeUntil(this._destroyed))\n                .subscribe((event) => {\n                this._points.push({ x: event.clientX, y: event.clientY });\n                if (this._points.length > NUM_POINTS) {\n                    this._points.shift();\n                }\n            });\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: TargetMenuAim, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: TargetMenuAim }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: TargetMenuAim, decorators: [{\n            type: Injectable\n        }] });\n/**\n * CdkTargetMenuAim is a provider for the TargetMenuAim service. It can be added to an\n * element with either the `cdkMenu` or `cdkMenuBar` directive and child menu items.\n */\nclass CdkTargetMenuAim {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkTargetMenuAim, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkTargetMenuAim, isStandalone: true, selector: \"[cdkTargetMenuAim]\", providers: [{ provide: MENU_AIM, useClass: TargetMenuAim }], exportAs: [\"cdkTargetMenuAim\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkTargetMenuAim, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkTargetMenuAim]',\n                    exportAs: 'cdkTargetMenuAim',\n                    standalone: true,\n                    providers: [{ provide: MENU_AIM, useClass: TargetMenuAim }],\n                }]\n        }] });\n\n/**\n * A directive that turns its host element into a trigger for a popup menu.\n * It can be combined with cdkMenuItem to create sub-menus. If the element is in a top level\n * MenuBar it will open the menu on click, or if a sibling is already opened it will open on hover.\n * If it is inside of a Menu it will open the attached Submenu on hover regardless of its sibling\n * state.\n */\nclass CdkMenuTrigger extends CdkMenuTriggerBase {\n    constructor() {\n        super();\n        this._elementRef = inject(ElementRef);\n        this._overlay = inject(Overlay);\n        this._ngZone = inject(NgZone);\n        this._directionality = inject(Directionality, { optional: true });\n        this._inputModalityDetector = inject(InputModalityDetector);\n        /** The parent menu this trigger belongs to. */\n        this._parentMenu = inject(CDK_MENU, { optional: true });\n        /** The menu aim service used by this menu. */\n        this._menuAim = inject(MENU_AIM, { optional: true });\n        this._setRole();\n        this._registerCloseHandler();\n        this._subscribeToMenuStackClosed();\n        this._subscribeToMouseEnter();\n        this._subscribeToMenuStackHasFocus();\n        this._setType();\n    }\n    /** Toggle the attached menu. */\n    toggle() {\n        this.isOpen() ? this.close() : this.open();\n    }\n    /** Open the attached menu. */\n    open() {\n        if (!this.isOpen() && this.menuTemplateRef != null) {\n            this.opened.next();\n            this.overlayRef = this.overlayRef || this._overlay.create(this._getOverlayConfig());\n            this.overlayRef.attach(this.getMenuContentPortal());\n            this._subscribeToOutsideClicks();\n        }\n    }\n    /** Close the opened menu. */\n    close() {\n        if (this.isOpen()) {\n            this.closed.next();\n            this.overlayRef.detach();\n        }\n        this._closeSiblingTriggers();\n    }\n    /**\n     * Get a reference to the rendered Menu if the Menu is open and rendered in the DOM.\n     */\n    getMenu() {\n        return this.childMenu;\n    }\n    /**\n     * Handles keyboard events for the menu item.\n     * @param event The keyboard event to handle\n     */\n    _toggleOnKeydown(event) {\n        const isParentVertical = this._parentMenu?.orientation === 'vertical';\n        switch (event.keyCode) {\n            case SPACE:\n            case ENTER:\n                if (!hasModifierKey(event)) {\n                    this.toggle();\n                    this.childMenu?.focusFirstItem('keyboard');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (!hasModifierKey(event)) {\n                    if (this._parentMenu && isParentVertical && this._directionality?.value !== 'rtl') {\n                        event.preventDefault();\n                        this.open();\n                        this.childMenu?.focusFirstItem('keyboard');\n                    }\n                }\n                break;\n            case LEFT_ARROW:\n                if (!hasModifierKey(event)) {\n                    if (this._parentMenu && isParentVertical && this._directionality?.value === 'rtl') {\n                        event.preventDefault();\n                        this.open();\n                        this.childMenu?.focusFirstItem('keyboard');\n                    }\n                }\n                break;\n            case DOWN_ARROW:\n            case UP_ARROW:\n                if (!hasModifierKey(event)) {\n                    if (!isParentVertical) {\n                        event.preventDefault();\n                        this.open();\n                        event.keyCode === DOWN_ARROW\n                            ? this.childMenu?.focusFirstItem('keyboard')\n                            : this.childMenu?.focusLastItem('keyboard');\n                    }\n                }\n                break;\n        }\n    }\n    /** Handles clicks on the menu trigger. */\n    _handleClick() {\n        // Don't handle clicks originating from the keyboard since we\n        // already do the same on `keydown` events for enter and space.\n        if (this._inputModalityDetector.mostRecentModality !== 'keyboard') {\n            this.toggle();\n            this.childMenu?.focusFirstItem('mouse');\n        }\n    }\n    /**\n     * Sets whether the trigger's menu stack has focus.\n     * @param hasFocus Whether the menu stack has focus.\n     */\n    _setHasFocus(hasFocus) {\n        if (!this._parentMenu) {\n            this.menuStack.setHasFocus(hasFocus);\n        }\n    }\n    /**\n     * Subscribe to the mouseenter events and close any sibling menu items if this element is moused\n     * into.\n     */\n    _subscribeToMouseEnter() {\n        this._ngZone.runOutsideAngular(() => {\n            fromEvent(this._elementRef.nativeElement, 'mouseenter')\n                .pipe(filter(() => !this.menuStack.isEmpty() && !this.isOpen()), takeUntil(this.destroyed))\n                .subscribe(() => {\n                // Closes any sibling menu items and opens the menu associated with this trigger.\n                const toggleMenus = () => this._ngZone.run(() => {\n                    this._closeSiblingTriggers();\n                    this.open();\n                });\n                if (this._menuAim) {\n                    this._menuAim.toggle(toggleMenus);\n                }\n                else {\n                    toggleMenus();\n                }\n            });\n        });\n    }\n    /** Close out any sibling menu trigger menus. */\n    _closeSiblingTriggers() {\n        if (this._parentMenu) {\n            // If nothing was removed from the stack and the last element is not the parent item\n            // that means that the parent menu is a menu bar since we don't put the menu bar on the\n            // stack\n            const isParentMenuBar = !this.menuStack.closeSubMenuOf(this._parentMenu) &&\n                this.menuStack.peek() !== this._parentMenu;\n            if (isParentMenuBar) {\n                this.menuStack.closeAll();\n            }\n        }\n        else {\n            this.menuStack.closeAll();\n        }\n    }\n    /** Get the configuration object used to create the overlay. */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPositionStrategy(),\n            scrollStrategy: this._overlay.scrollStrategies.reposition(),\n            direction: this._directionality || undefined,\n        });\n    }\n    /** Build the position strategy for the overlay which specifies where to place the menu. */\n    _getOverlayPositionStrategy() {\n        return this._overlay\n            .position()\n            .flexibleConnectedTo(this._elementRef)\n            .withLockedPosition()\n            .withGrowAfterOpen()\n            .withPositions(this._getOverlayPositions());\n    }\n    /** Get the preferred positions for the opened menu relative to the menu item. */\n    _getOverlayPositions() {\n        return (this.menuPosition ??\n            (!this._parentMenu || this._parentMenu.orientation === 'horizontal'\n                ? STANDARD_DROPDOWN_BELOW_POSITIONS\n                : STANDARD_DROPDOWN_ADJACENT_POSITIONS));\n    }\n    /**\n     * Subscribe to the MenuStack close events if this is a standalone trigger and close out the menu\n     * this triggers when requested.\n     */\n    _registerCloseHandler() {\n        if (!this._parentMenu) {\n            this.menuStack.closed.pipe(takeUntil(this.destroyed)).subscribe(({ item }) => {\n                if (item === this.childMenu) {\n                    this.close();\n                }\n            });\n        }\n    }\n    /**\n     * Subscribe to the overlays outside pointer events stream and handle closing out the stack if a\n     * click occurs outside the menus.\n     */\n    _subscribeToOutsideClicks() {\n        if (this.overlayRef) {\n            this.overlayRef\n                .outsidePointerEvents()\n                .pipe(takeUntil(this.stopOutsideClicksListener))\n                .subscribe(event => {\n                const target = _getEventTarget(event);\n                const element = this._elementRef.nativeElement;\n                if (target !== element && !element.contains(target)) {\n                    if (!this.isElementInsideMenuStack(target)) {\n                        this.menuStack.closeAll();\n                    }\n                    else {\n                        this._closeSiblingTriggers();\n                    }\n                }\n            });\n        }\n    }\n    /** Subscribe to the MenuStack hasFocus events. */\n    _subscribeToMenuStackHasFocus() {\n        if (!this._parentMenu) {\n            this.menuStack.hasFocus.pipe(takeUntil(this.destroyed)).subscribe(hasFocus => {\n                if (!hasFocus) {\n                    this.menuStack.closeAll();\n                }\n            });\n        }\n    }\n    /** Subscribe to the MenuStack closed events. */\n    _subscribeToMenuStackClosed() {\n        if (!this._parentMenu) {\n            this.menuStack.closed.subscribe(({ focusParentTrigger }) => {\n                if (focusParentTrigger && !this.menuStack.length()) {\n                    this._elementRef.nativeElement.focus();\n                }\n            });\n        }\n    }\n    /** Sets the role attribute for this trigger if needed. */\n    _setRole() {\n        // If this trigger is part of another menu, the cdkMenuItem directive will handle setting the\n        // role, otherwise this is a standalone trigger, and we should ensure it has role=\"button\".\n        if (!this._parentMenu) {\n            this._elementRef.nativeElement.setAttribute('role', 'button');\n        }\n    }\n    /** Sets thte `type` attribute of the trigger. */\n    _setType() {\n        const element = this._elementRef.nativeElement;\n        if (element.nodeName === 'BUTTON' && !element.getAttribute('type')) {\n            // Prevents form submissions.\n            element.setAttribute('type', 'button');\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkMenuTrigger, isStandalone: true, selector: \"[cdkMenuTriggerFor]\", inputs: { menuTemplateRef: [\"cdkMenuTriggerFor\", \"menuTemplateRef\"], menuPosition: [\"cdkMenuPosition\", \"menuPosition\"], menuData: [\"cdkMenuTriggerData\", \"menuData\"] }, outputs: { opened: \"cdkMenuOpened\", closed: \"cdkMenuClosed\" }, host: { listeners: { \"focusin\": \"_setHasFocus(true)\", \"focusout\": \"_setHasFocus(false)\", \"keydown\": \"_toggleOnKeydown($event)\", \"click\": \"_handleClick()\" }, properties: { \"attr.aria-haspopup\": \"menuTemplateRef ? \\\"menu\\\" : null\", \"attr.aria-expanded\": \"menuTemplateRef == null ? null : isOpen()\" }, classAttribute: \"cdk-menu-trigger\" }, providers: [\n            { provide: MENU_TRIGGER, useExisting: CdkMenuTrigger },\n            PARENT_OR_NEW_MENU_STACK_PROVIDER,\n        ], exportAs: [\"cdkMenuTriggerFor\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkMenuTriggerFor]',\n                    exportAs: 'cdkMenuTriggerFor',\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-menu-trigger',\n                        '[attr.aria-haspopup]': 'menuTemplateRef ? \"menu\" : null',\n                        '[attr.aria-expanded]': 'menuTemplateRef == null ? null : isOpen()',\n                        '(focusin)': '_setHasFocus(true)',\n                        '(focusout)': '_setHasFocus(false)',\n                        '(keydown)': '_toggleOnKeydown($event)',\n                        '(click)': '_handleClick()',\n                    },\n                    inputs: [\n                        'menuTemplateRef: cdkMenuTriggerFor',\n                        'menuPosition: cdkMenuPosition',\n                        'menuData: cdkMenuTriggerData',\n                    ],\n                    outputs: ['opened: cdkMenuOpened', 'closed: cdkMenuClosed'],\n                    providers: [\n                        { provide: MENU_TRIGGER, useExisting: CdkMenuTrigger },\n                        PARENT_OR_NEW_MENU_STACK_PROVIDER,\n                    ],\n                }]\n        }], ctorParameters: function () { return []; } });\n\n/**\n * Directive which provides the ability for an element to be focused and navigated to using the\n * keyboard when residing in a CdkMenu, CdkMenuBar, or CdkMenuGroup. It performs user defined\n * behavior when clicked.\n */\nclass CdkMenuItem {\n    /**  Whether the CdkMenuItem is disabled - defaults to false */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /** Whether the menu item opens a menu. */\n    get hasMenu() {\n        return this._menuTrigger?.menuTemplateRef != null;\n    }\n    constructor() {\n        this._dir = inject(Directionality, { optional: true });\n        this._inputModalityDetector = inject(InputModalityDetector);\n        this._elementRef = inject(ElementRef);\n        this._ngZone = inject(NgZone);\n        /** The menu aim service used by this menu. */\n        this._menuAim = inject(MENU_AIM, { optional: true });\n        /** The stack of menus this menu belongs to. */\n        this._menuStack = inject(MENU_STACK);\n        /** The parent menu in which this menuitem resides. */\n        this._parentMenu = inject(CDK_MENU, { optional: true });\n        /** Reference to the CdkMenuItemTrigger directive if one is added to the same element */\n        this._menuTrigger = inject(CdkMenuTrigger, { optional: true, self: true });\n        this._disabled = false;\n        /**\n         * If this MenuItem is a regular MenuItem, outputs when it is triggered by a keyboard or mouse\n         * event.\n         */\n        this.triggered = new EventEmitter();\n        /**\n         * The tabindex for this menu item managed internally and used for implementing roving a\n         * tab index.\n         */\n        this._tabindex = -1;\n        /** Whether the item should close the menu if triggered by the spacebar. */\n        this.closeOnSpacebarTrigger = true;\n        /** Emits when the menu item is destroyed. */\n        this.destroyed = new Subject();\n        this._setupMouseEnter();\n        this._setType();\n        if (this._isStandaloneItem()) {\n            this._tabindex = 0;\n        }\n    }\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n    /** Place focus on the element. */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    /**\n     * If the menu item is not disabled and the element does not have a menu trigger attached, emit\n     * on the cdkMenuItemTriggered emitter and close all open menus.\n     * @param options Options the configure how the item is triggered\n     *   - keepOpen: specifies that the menu should be kept open after triggering the item.\n     */\n    trigger(options) {\n        const { keepOpen } = { ...options };\n        if (!this.disabled && !this.hasMenu) {\n            this.triggered.next();\n            if (!keepOpen) {\n                this._menuStack.closeAll({ focusParentTrigger: true });\n            }\n        }\n    }\n    /** Return true if this MenuItem has an attached menu and it is open. */\n    isMenuOpen() {\n        return !!this._menuTrigger?.isOpen();\n    }\n    /**\n     * Get a reference to the rendered Menu if the Menu is open and it is visible in the DOM.\n     * @return the menu if it is open, otherwise undefined.\n     */\n    getMenu() {\n        return this._menuTrigger?.getMenu();\n    }\n    /** Get the CdkMenuTrigger associated with this element. */\n    getMenuTrigger() {\n        return this._menuTrigger;\n    }\n    /** Get the label for this element which is required by the FocusableOption interface. */\n    getLabel() {\n        return this.typeaheadLabel || this._elementRef.nativeElement.textContent?.trim() || '';\n    }\n    /** Reset the tabindex to -1. */\n    _resetTabIndex() {\n        if (!this._isStandaloneItem()) {\n            this._tabindex = -1;\n        }\n    }\n    /**\n     * Set the tab index to 0 if not disabled and it's a focus event, or a mouse enter if this element\n     * is not in a menu bar.\n     */\n    _setTabIndex(event) {\n        if (this.disabled) {\n            return;\n        }\n        // don't set the tabindex if there are no open sibling or parent menus\n        if (!event || !this._menuStack.isEmpty()) {\n            this._tabindex = 0;\n        }\n    }\n    /**\n     * Handles keyboard events for the menu item, specifically either triggering the user defined\n     * callback or opening/closing the current menu based on whether the left or right arrow key was\n     * pressed.\n     * @param event the keyboard event to handle\n     */\n    _onKeydown(event) {\n        switch (event.keyCode) {\n            case SPACE:\n            case ENTER:\n                if (!hasModifierKey(event)) {\n                    this.trigger({ keepOpen: event.keyCode === SPACE && !this.closeOnSpacebarTrigger });\n                }\n                break;\n            case RIGHT_ARROW:\n                if (!hasModifierKey(event)) {\n                    if (this._parentMenu && this._isParentVertical()) {\n                        if (this._dir?.value !== 'rtl') {\n                            this._forwardArrowPressed(event);\n                        }\n                        else {\n                            this._backArrowPressed(event);\n                        }\n                    }\n                }\n                break;\n            case LEFT_ARROW:\n                if (!hasModifierKey(event)) {\n                    if (this._parentMenu && this._isParentVertical()) {\n                        if (this._dir?.value !== 'rtl') {\n                            this._backArrowPressed(event);\n                        }\n                        else {\n                            this._forwardArrowPressed(event);\n                        }\n                    }\n                }\n                break;\n        }\n    }\n    /** Handles clicks on the menu item. */\n    _handleClick() {\n        // Don't handle clicks originating from the keyboard since we\n        // already do the same on `keydown` events for enter and space.\n        if (this._inputModalityDetector.mostRecentModality !== 'keyboard') {\n            this.trigger();\n        }\n    }\n    /** Whether this menu item is standalone or within a menu or menu bar. */\n    _isStandaloneItem() {\n        return !this._parentMenu;\n    }\n    /**\n     * Handles the user pressing the back arrow key.\n     * @param event The keyboard event.\n     */\n    _backArrowPressed(event) {\n        const parentMenu = this._parentMenu;\n        if (this._menuStack.hasInlineMenu() || this._menuStack.length() > 1) {\n            event.preventDefault();\n            this._menuStack.close(parentMenu, {\n                focusNextOnEmpty: this._menuStack.inlineMenuOrientation() === 'horizontal'\n                    ? 1 /* FocusNext.previousItem */\n                    : 2 /* FocusNext.currentItem */,\n                focusParentTrigger: true,\n            });\n        }\n    }\n    /**\n     * Handles the user pressing the forward arrow key.\n     * @param event The keyboard event.\n     */\n    _forwardArrowPressed(event) {\n        if (!this.hasMenu && this._menuStack.inlineMenuOrientation() === 'horizontal') {\n            event.preventDefault();\n            this._menuStack.closeAll({\n                focusNextOnEmpty: 0 /* FocusNext.nextItem */,\n                focusParentTrigger: true,\n            });\n        }\n    }\n    /**\n     * Subscribe to the mouseenter events and close any sibling menu items if this element is moused\n     * into.\n     */\n    _setupMouseEnter() {\n        if (!this._isStandaloneItem()) {\n            const closeOpenSiblings = () => this._ngZone.run(() => this._menuStack.closeSubMenuOf(this._parentMenu));\n            this._ngZone.runOutsideAngular(() => fromEvent(this._elementRef.nativeElement, 'mouseenter')\n                .pipe(filter(() => !this._menuStack.isEmpty() && !this.hasMenu), takeUntil(this.destroyed))\n                .subscribe(() => {\n                if (this._menuAim) {\n                    this._menuAim.toggle(closeOpenSiblings);\n                }\n                else {\n                    closeOpenSiblings();\n                }\n            }));\n        }\n    }\n    /**\n     * Return true if the enclosing parent menu is configured in a horizontal orientation, false\n     * otherwise or if no parent.\n     */\n    _isParentVertical() {\n        return this._parentMenu?.orientation === 'vertical';\n    }\n    /** Sets the `type` attribute of the menu item. */\n    _setType() {\n        const element = this._elementRef.nativeElement;\n        if (element.nodeName === 'BUTTON' && !element.getAttribute('type')) {\n            // Prevent form submissions.\n            element.setAttribute('type', 'button');\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuItem, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkMenuItem, isStandalone: true, selector: \"[cdkMenuItem]\", inputs: { disabled: [\"cdkMenuItemDisabled\", \"disabled\"], typeaheadLabel: [\"cdkMenuitemTypeaheadLabel\", \"typeaheadLabel\"] }, outputs: { triggered: \"cdkMenuItemTriggered\" }, host: { attributes: { \"role\": \"menuitem\" }, listeners: { \"blur\": \"_resetTabIndex()\", \"focus\": \"_setTabIndex()\", \"click\": \"_handleClick()\", \"keydown\": \"_onKeydown($event)\" }, properties: { \"tabindex\": \"_tabindex\", \"attr.aria-disabled\": \"disabled || null\" }, classAttribute: \"cdk-menu-item\" }, exportAs: [\"cdkMenuItem\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuItem, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkMenuItem]',\n                    exportAs: 'cdkMenuItem',\n                    standalone: true,\n                    host: {\n                        'role': 'menuitem',\n                        'class': 'cdk-menu-item',\n                        '[tabindex]': '_tabindex',\n                        '[attr.aria-disabled]': 'disabled || null',\n                        '(blur)': '_resetTabIndex()',\n                        '(focus)': '_setTabIndex()',\n                        '(click)': '_handleClick()',\n                        '(keydown)': '_onKeydown($event)',\n                    },\n                }]\n        }], ctorParameters: function () { return []; }, propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkMenuItemDisabled']\n            }], typeaheadLabel: [{\n                type: Input,\n                args: ['cdkMenuitemTypeaheadLabel']\n            }], triggered: [{\n                type: Output,\n                args: ['cdkMenuItemTriggered']\n            }] } });\n\n/**\n * PointerFocusTracker keeps track of the currently active item under mouse focus. It also has\n * observables which emit when the users mouse enters and leaves a tracked element.\n */\nclass PointerFocusTracker {\n    constructor(\n    /** The list of items being tracked. */\n    _items) {\n        this._items = _items;\n        /** Emits when an element is moused into. */\n        this.entered = this._getItemPointerEntries();\n        /** Emits when an element is moused out. */\n        this.exited = this._getItemPointerExits();\n        /** Emits when this is destroyed. */\n        this._destroyed = new Subject();\n        this.entered.subscribe(element => (this.activeElement = element));\n        this.exited.subscribe(() => {\n            this.previousElement = this.activeElement;\n            this.activeElement = undefined;\n        });\n    }\n    /** Stop the managers listeners. */\n    destroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Gets a stream of pointer (mouse) entries into the given items.\n     * This should typically run outside the Angular zone.\n     */\n    _getItemPointerEntries() {\n        return defer(() => this._items.changes.pipe(startWith(this._items), mergeMap((list) => list.map(element => fromEvent(element._elementRef.nativeElement, 'mouseenter').pipe(mapTo(element), takeUntil(this._items.changes)))), mergeAll()));\n    }\n    /**\n     * Gets a stream of pointer (mouse) exits out of the given items.\n     * This should typically run outside the Angular zone.\n     */\n    _getItemPointerExits() {\n        return defer(() => this._items.changes.pipe(startWith(this._items), mergeMap((list) => list.map(element => fromEvent(element._elementRef.nativeElement, 'mouseout').pipe(mapTo(element), takeUntil(this._items.changes)))), mergeAll()));\n    }\n}\n\n/** Counter used to create unique IDs for menus. */\nlet nextId$1 = 0;\n/**\n * Abstract directive that implements shared logic common to all menus.\n * This class can be extended to create custom menu types.\n */\nclass CdkMenuBase extends CdkMenuGroup {\n    constructor() {\n        super(...arguments);\n        /** The menu's native DOM host element. */\n        this.nativeElement = inject(ElementRef).nativeElement;\n        /** The Angular zone. */\n        this.ngZone = inject(NgZone);\n        /** The stack of menus this menu belongs to. */\n        this.menuStack = inject(MENU_STACK);\n        /** The menu aim service used by this menu. */\n        this.menuAim = inject(MENU_AIM, { optional: true, self: true });\n        /** The directionality (text direction) of the current page. */\n        this.dir = inject(Directionality, { optional: true });\n        /** The id of the menu's host element. */\n        this.id = `cdk-menu-${nextId$1++}`;\n        /** The direction items in the menu flow. */\n        this.orientation = 'vertical';\n        /**\n         * Whether the menu is displayed inline (i.e. always present vs a conditional popup that the\n         * user triggers with a trigger element).\n         */\n        this.isInline = false;\n        /** Emits when the MenuBar is destroyed. */\n        this.destroyed = new Subject();\n        /** Whether this menu's menu stack has focus. */\n        this._menuStackHasFocus = false;\n    }\n    ngAfterContentInit() {\n        if (!this.isInline) {\n            this.menuStack.push(this);\n        }\n        this._setKeyManager();\n        this._subscribeToMenuStackHasFocus();\n        this._subscribeToMenuOpen();\n        this._subscribeToMenuStackClosed();\n        this._setUpPointerTracker();\n    }\n    ngOnDestroy() {\n        this.keyManager?.destroy();\n        this.destroyed.next();\n        this.destroyed.complete();\n        this.pointerTracker?.destroy();\n    }\n    /**\n     * Place focus on the first MenuItem in the menu and set the focus origin.\n     * @param focusOrigin The origin input mode of the focus event.\n     */\n    focusFirstItem(focusOrigin = 'program') {\n        this.keyManager.setFocusOrigin(focusOrigin);\n        this.keyManager.setFirstItemActive();\n    }\n    /**\n     * Place focus on the last MenuItem in the menu and set the focus origin.\n     * @param focusOrigin The origin input mode of the focus event.\n     */\n    focusLastItem(focusOrigin = 'program') {\n        this.keyManager.setFocusOrigin(focusOrigin);\n        this.keyManager.setLastItemActive();\n    }\n    /** Gets the tabindex for this menu. */\n    _getTabIndex() {\n        const tabindexIfInline = this._menuStackHasFocus ? -1 : 0;\n        return this.isInline ? tabindexIfInline : null;\n    }\n    /**\n     * Close the open menu if the current active item opened the requested MenuStackItem.\n     * @param menu The menu requested to be closed.\n     * @param options Options to configure the behavior on close.\n     *   - `focusParentTrigger` Whether to focus the parent trigger after closing the menu.\n     */\n    closeOpenMenu(menu, options) {\n        const { focusParentTrigger } = { ...options };\n        const keyManager = this.keyManager;\n        const trigger = this.triggerItem;\n        if (menu === trigger?.getMenuTrigger()?.getMenu()) {\n            trigger?.getMenuTrigger()?.close();\n            // If the user has moused over a sibling item we want to focus the element under mouse focus\n            // not the trigger which previously opened the now closed menu.\n            if (focusParentTrigger) {\n                if (trigger) {\n                    keyManager.setActiveItem(trigger);\n                }\n                else {\n                    keyManager.setFirstItemActive();\n                }\n            }\n        }\n    }\n    /** Setup the FocusKeyManager with the correct orientation for the menu. */\n    _setKeyManager() {\n        this.keyManager = new FocusKeyManager(this.items).withWrap().withTypeAhead().withHomeAndEnd();\n        if (this.orientation === 'horizontal') {\n            this.keyManager.withHorizontalOrientation(this.dir?.value || 'ltr');\n        }\n        else {\n            this.keyManager.withVerticalOrientation();\n        }\n    }\n    /**\n     * Subscribe to the menu trigger's open events in order to track the trigger which opened the menu\n     * and stop tracking it when the menu is closed.\n     */\n    _subscribeToMenuOpen() {\n        const exitCondition = merge(this.items.changes, this.destroyed);\n        this.items.changes\n            .pipe(startWith(this.items), mergeMap((list) => list\n            .filter(item => item.hasMenu)\n            .map(item => item.getMenuTrigger().opened.pipe(mapTo(item), takeUntil(exitCondition)))), mergeAll(), switchMap((item) => {\n            this.triggerItem = item;\n            return item.getMenuTrigger().closed;\n        }), takeUntil(this.destroyed))\n            .subscribe(() => (this.triggerItem = undefined));\n    }\n    /** Subscribe to the MenuStack close events. */\n    _subscribeToMenuStackClosed() {\n        this.menuStack.closed\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(({ item, focusParentTrigger }) => this.closeOpenMenu(item, { focusParentTrigger }));\n    }\n    /** Subscribe to the MenuStack hasFocus events. */\n    _subscribeToMenuStackHasFocus() {\n        if (this.isInline) {\n            this.menuStack.hasFocus.pipe(takeUntil(this.destroyed)).subscribe(hasFocus => {\n                this._menuStackHasFocus = hasFocus;\n            });\n        }\n    }\n    /**\n     * Set the PointerFocusTracker and ensure that when mouse focus changes the key manager is updated\n     * with the latest menu item under mouse focus.\n     */\n    _setUpPointerTracker() {\n        if (this.menuAim) {\n            this.ngZone.runOutsideAngular(() => {\n                this.pointerTracker = new PointerFocusTracker(this.items);\n            });\n            this.menuAim.initialize(this, this.pointerTracker);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuBase, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkMenuBase, inputs: { id: \"id\" }, host: { attributes: { \"role\": \"menu\" }, listeners: { \"focus\": \"focusFirstItem()\", \"focusin\": \"menuStack.setHasFocus(true)\", \"focusout\": \"menuStack.setHasFocus(false)\" }, properties: { \"tabindex\": \"_getTabIndex()\", \"id\": \"id\", \"attr.aria-orientation\": \"orientation\", \"attr.data-cdk-menu-stack-id\": \"menuStack.id\" } }, queries: [{ propertyName: \"items\", predicate: CdkMenuItem, descendants: true }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuBase, decorators: [{\n            type: Directive,\n            args: [{\n                    host: {\n                        'role': 'menu',\n                        'class': '',\n                        '[tabindex]': '_getTabIndex()',\n                        '[id]': 'id',\n                        '[attr.aria-orientation]': 'orientation',\n                        '[attr.data-cdk-menu-stack-id]': 'menuStack.id',\n                        '(focus)': 'focusFirstItem()',\n                        '(focusin)': 'menuStack.setHasFocus(true)',\n                        '(focusout)': 'menuStack.setHasFocus(false)',\n                    },\n                }]\n        }], propDecorators: { id: [{\n                type: Input\n            }], items: [{\n                type: ContentChildren,\n                args: [CdkMenuItem, { descendants: true }]\n            }] } });\n\n/**\n * Directive which configures the element as a Menu which should contain child elements marked as\n * CdkMenuItem or CdkMenuGroup. Sets the appropriate role and aria-attributes for a menu and\n * contains accessible keyboard and mouse handling logic.\n *\n * It also acts as a RadioGroup for elements marked with role `menuitemradio`.\n */\nclass CdkMenu extends CdkMenuBase {\n    constructor() {\n        super();\n        this._parentTrigger = inject(MENU_TRIGGER, { optional: true });\n        /** Event emitted when the menu is closed. */\n        this.closed = new EventEmitter();\n        /** The direction items in the menu flow. */\n        this.orientation = 'vertical';\n        /** Whether the menu is displayed inline (i.e. always present vs a conditional popup that the user triggers with a trigger element). */\n        this.isInline = !this._parentTrigger;\n        this.destroyed.subscribe(this.closed);\n        this._parentTrigger?.registerChildMenu(this);\n    }\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n        this._subscribeToMenuStackEmptied();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this.closed.complete();\n    }\n    /**\n     * Handle keyboard events for the Menu.\n     * @param event The keyboard event to be handled.\n     */\n    _handleKeyEvent(event) {\n        const keyManager = this.keyManager;\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n            case RIGHT_ARROW:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    keyManager.setFocusOrigin('keyboard');\n                    keyManager.onKeydown(event);\n                }\n                break;\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.menuStack.close(this, {\n                        focusNextOnEmpty: 2 /* FocusNext.currentItem */,\n                        focusParentTrigger: true,\n                    });\n                }\n                break;\n            case TAB:\n                if (!hasModifierKey(event, 'altKey', 'metaKey', 'ctrlKey')) {\n                    this.menuStack.closeAll({ focusParentTrigger: true });\n                }\n                break;\n            default:\n                keyManager.onKeydown(event);\n        }\n    }\n    /**\n     * Set focus the either the current, previous or next item based on the FocusNext event.\n     * @param focusNext The element to focus.\n     */\n    _toggleMenuFocus(focusNext) {\n        const keyManager = this.keyManager;\n        switch (focusNext) {\n            case 0 /* FocusNext.nextItem */:\n                keyManager.setFocusOrigin('keyboard');\n                keyManager.setNextItemActive();\n                break;\n            case 1 /* FocusNext.previousItem */:\n                keyManager.setFocusOrigin('keyboard');\n                keyManager.setPreviousItemActive();\n                break;\n            case 2 /* FocusNext.currentItem */:\n                if (keyManager.activeItem) {\n                    keyManager.setFocusOrigin('keyboard');\n                    keyManager.setActiveItem(keyManager.activeItem);\n                }\n                break;\n        }\n    }\n    /** Subscribe to the MenuStack emptied events. */\n    _subscribeToMenuStackEmptied() {\n        this.menuStack.emptied\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(event => this._toggleMenuFocus(event));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenu, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkMenu, isStandalone: true, selector: \"[cdkMenu]\", outputs: { closed: \"closed\" }, host: { attributes: { \"role\": \"menu\" }, listeners: { \"keydown\": \"_handleKeyEvent($event)\" }, properties: { \"class.cdk-menu-inline\": \"isInline\" }, classAttribute: \"cdk-menu\" }, providers: [\n            { provide: CdkMenuGroup, useExisting: CdkMenu },\n            { provide: CDK_MENU, useExisting: CdkMenu },\n            PARENT_OR_NEW_INLINE_MENU_STACK_PROVIDER('vertical'),\n        ], exportAs: [\"cdkMenu\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenu, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkMenu]',\n                    exportAs: 'cdkMenu',\n                    standalone: true,\n                    host: {\n                        'role': 'menu',\n                        'class': 'cdk-menu',\n                        '[class.cdk-menu-inline]': 'isInline',\n                        '(keydown)': '_handleKeyEvent($event)',\n                    },\n                    providers: [\n                        { provide: CdkMenuGroup, useExisting: CdkMenu },\n                        { provide: CDK_MENU, useExisting: CdkMenu },\n                        PARENT_OR_NEW_INLINE_MENU_STACK_PROVIDER('vertical'),\n                    ],\n                }]\n        }], ctorParameters: function () { return []; }, propDecorators: { closed: [{\n                type: Output\n            }] } });\n\n/**\n * Directive applied to an element which configures it as a MenuBar by setting the appropriate\n * role, aria attributes, and accessible keyboard and mouse handling logic. The component that\n * this directive is applied to should contain components marked with CdkMenuItem.\n *\n */\nclass CdkMenuBar extends CdkMenuBase {\n    constructor() {\n        super(...arguments);\n        /** The direction items in the menu flow. */\n        this.orientation = 'horizontal';\n        /** Whether the menu is displayed inline (i.e. always present vs a conditional popup that the user triggers with a trigger element). */\n        this.isInline = true;\n    }\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n        this._subscribeToMenuStackEmptied();\n    }\n    /**\n     * Handle keyboard events for the Menu.\n     * @param event The keyboard event to be handled.\n     */\n    _handleKeyEvent(event) {\n        const keyManager = this.keyManager;\n        switch (event.keyCode) {\n            case UP_ARROW:\n            case DOWN_ARROW:\n            case LEFT_ARROW:\n            case RIGHT_ARROW:\n                if (!hasModifierKey(event)) {\n                    const horizontalArrows = event.keyCode === LEFT_ARROW || event.keyCode === RIGHT_ARROW;\n                    // For a horizontal menu if the left/right keys were clicked, or a vertical menu if the\n                    // up/down keys were clicked: if the current menu is open, close it then focus and open the\n                    // next  menu.\n                    if (horizontalArrows) {\n                        event.preventDefault();\n                        const prevIsOpen = keyManager.activeItem?.isMenuOpen();\n                        keyManager.activeItem?.getMenuTrigger()?.close();\n                        keyManager.setFocusOrigin('keyboard');\n                        keyManager.onKeydown(event);\n                        if (prevIsOpen) {\n                            keyManager.activeItem?.getMenuTrigger()?.open();\n                        }\n                    }\n                }\n                break;\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    keyManager.activeItem?.getMenuTrigger()?.close();\n                }\n                break;\n            case TAB:\n                if (!hasModifierKey(event, 'altKey', 'metaKey', 'ctrlKey')) {\n                    keyManager.activeItem?.getMenuTrigger()?.close();\n                }\n                break;\n            default:\n                keyManager.onKeydown(event);\n        }\n    }\n    /**\n     * Set focus to either the current, previous or next item based on the FocusNext event, then\n     * open the previous or next item.\n     * @param focusNext The element to focus.\n     */\n    _toggleOpenMenu(focusNext) {\n        const keyManager = this.keyManager;\n        switch (focusNext) {\n            case 0 /* FocusNext.nextItem */:\n                keyManager.setFocusOrigin('keyboard');\n                keyManager.setNextItemActive();\n                keyManager.activeItem?.getMenuTrigger()?.open();\n                break;\n            case 1 /* FocusNext.previousItem */:\n                keyManager.setFocusOrigin('keyboard');\n                keyManager.setPreviousItemActive();\n                keyManager.activeItem?.getMenuTrigger()?.open();\n                break;\n            case 2 /* FocusNext.currentItem */:\n                if (keyManager.activeItem) {\n                    keyManager.setFocusOrigin('keyboard');\n                    keyManager.setActiveItem(keyManager.activeItem);\n                }\n                break;\n        }\n    }\n    /** Subscribe to the MenuStack emptied events. */\n    _subscribeToMenuStackEmptied() {\n        this.menuStack?.emptied\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(event => this._toggleOpenMenu(event));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuBar, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkMenuBar, isStandalone: true, selector: \"[cdkMenuBar]\", host: { attributes: { \"role\": \"menubar\" }, listeners: { \"keydown\": \"_handleKeyEvent($event)\" }, classAttribute: \"cdk-menu-bar\" }, providers: [\n            { provide: CdkMenuGroup, useExisting: CdkMenuBar },\n            { provide: CDK_MENU, useExisting: CdkMenuBar },\n            { provide: MENU_STACK, useFactory: () => MenuStack.inline('horizontal') },\n        ], exportAs: [\"cdkMenuBar\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuBar, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkMenuBar]',\n                    exportAs: 'cdkMenuBar',\n                    standalone: true,\n                    host: {\n                        'role': 'menubar',\n                        'class': 'cdk-menu-bar',\n                        '(keydown)': '_handleKeyEvent($event)',\n                    },\n                    providers: [\n                        { provide: CdkMenuGroup, useExisting: CdkMenuBar },\n                        { provide: CDK_MENU, useExisting: CdkMenuBar },\n                        { provide: MENU_STACK, useFactory: () => MenuStack.inline('horizontal') },\n                    ],\n                }]\n        }] });\n\n/** Base class providing checked state for selectable MenuItems. */\nclass CdkMenuItemSelectable extends CdkMenuItem {\n    constructor() {\n        super(...arguments);\n        this._checked = false;\n        /** Whether the item should close the menu if triggered by the spacebar. */\n        this.closeOnSpacebarTrigger = false;\n    }\n    /** Whether the element is checked */\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuItemSelectable, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkMenuItemSelectable, inputs: { checked: [\"cdkMenuItemChecked\", \"checked\"] }, host: { properties: { \"attr.aria-checked\": \"!!checked\", \"attr.aria-disabled\": \"disabled || null\" } }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuItemSelectable, decorators: [{\n            type: Directive,\n            args: [{\n                    host: {\n                        '[attr.aria-checked]': '!!checked',\n                        '[attr.aria-disabled]': 'disabled || null',\n                    },\n                }]\n        }], propDecorators: { checked: [{\n                type: Input,\n                args: ['cdkMenuItemChecked']\n            }] } });\n\n/** Counter used to set a unique id and name for a selectable item */\nlet nextId = 0;\n/**\n * A directive providing behavior for the \"menuitemradio\" ARIA role, which behaves similarly to\n * a conventional radio-button. Any sibling `CdkMenuItemRadio` instances within the same `CdkMenu`\n * or `CdkMenuGroup` comprise a radio group with unique selection enforced.\n */\nclass CdkMenuItemRadio extends CdkMenuItemSelectable {\n    constructor() {\n        super();\n        /** The unique selection dispatcher for this radio's `CdkMenuGroup`. */\n        this._selectionDispatcher = inject(UniqueSelectionDispatcher);\n        /** An ID to identify this radio item to the `UniqueSelectionDispatcher`. */\n        this._id = `${nextId++}`;\n        this._registerDispatcherListener();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._removeDispatcherListener();\n    }\n    /**\n     * Toggles the checked state of the radio-button.\n     * @param options Options the configure how the item is triggered\n     *   - keepOpen: specifies that the menu should be kept open after triggering the item.\n     */\n    trigger(options) {\n        super.trigger(options);\n        if (!this.disabled) {\n            this._selectionDispatcher.notify(this._id, '');\n        }\n    }\n    /** Configure the unique selection dispatcher listener in order to toggle the checked state  */\n    _registerDispatcherListener() {\n        this._removeDispatcherListener = this._selectionDispatcher.listen((id) => {\n            this.checked = this._id === id;\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuItemRadio, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkMenuItemRadio, isStandalone: true, selector: \"[cdkMenuItemRadio]\", host: { attributes: { \"role\": \"menuitemradio\" }, properties: { \"class.cdk-menu-item-radio\": \"true\" } }, providers: [\n            { provide: CdkMenuItemSelectable, useExisting: CdkMenuItemRadio },\n            { provide: CdkMenuItem, useExisting: CdkMenuItemSelectable },\n        ], exportAs: [\"cdkMenuItemRadio\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuItemRadio, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkMenuItemRadio]',\n                    exportAs: 'cdkMenuItemRadio',\n                    standalone: true,\n                    host: {\n                        'role': 'menuitemradio',\n                        '[class.cdk-menu-item-radio]': 'true',\n                    },\n                    providers: [\n                        { provide: CdkMenuItemSelectable, useExisting: CdkMenuItemRadio },\n                        { provide: CdkMenuItem, useExisting: CdkMenuItemSelectable },\n                    ],\n                }]\n        }], ctorParameters: function () { return []; } });\n\n/**\n * A directive providing behavior for the \"menuitemcheckbox\" ARIA role, which behaves similarly to a\n * conventional checkbox.\n */\nclass CdkMenuItemCheckbox extends CdkMenuItemSelectable {\n    /**\n     * Toggle the checked state of the checkbox.\n     * @param options Options the configure how the item is triggered\n     *   - keepOpen: specifies that the menu should be kept open after triggering the item.\n     */\n    trigger(options) {\n        super.trigger(options);\n        if (!this.disabled) {\n            this.checked = !this.checked;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuItemCheckbox, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkMenuItemCheckbox, isStandalone: true, selector: \"[cdkMenuItemCheckbox]\", host: { attributes: { \"role\": \"menuitemcheckbox\" }, properties: { \"class.cdk-menu-item-checkbox\": \"true\" } }, providers: [\n            { provide: CdkMenuItemSelectable, useExisting: CdkMenuItemCheckbox },\n            { provide: CdkMenuItem, useExisting: CdkMenuItemSelectable },\n        ], exportAs: [\"cdkMenuItemCheckbox\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuItemCheckbox, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkMenuItemCheckbox]',\n                    exportAs: 'cdkMenuItemCheckbox',\n                    standalone: true,\n                    host: {\n                        'role': 'menuitemcheckbox',\n                        '[class.cdk-menu-item-checkbox]': 'true',\n                    },\n                    providers: [\n                        { provide: CdkMenuItemSelectable, useExisting: CdkMenuItemCheckbox },\n                        { provide: CdkMenuItem, useExisting: CdkMenuItemSelectable },\n                    ],\n                }]\n        }] });\n\n/** The preferred menu positions for the context menu. */\nconst CONTEXT_MENU_POSITIONS = STANDARD_DROPDOWN_BELOW_POSITIONS.map(position => {\n    // In cases where the first menu item in the context menu is a trigger the submenu opens on a\n    // hover event. We offset the context menu 2px by default to prevent this from occurring.\n    const offsetX = position.overlayX === 'start' ? 2 : -2;\n    const offsetY = position.overlayY === 'top' ? 2 : -2;\n    return { ...position, offsetX, offsetY };\n});\n/** Tracks the last open context menu trigger across the entire application. */\nclass ContextMenuTracker {\n    /**\n     * Close the previous open context menu and set the given one as being open.\n     * @param trigger The trigger for the currently open Context Menu.\n     */\n    update(trigger) {\n        if (ContextMenuTracker._openContextMenuTrigger !== trigger) {\n            ContextMenuTracker._openContextMenuTrigger?.close();\n            ContextMenuTracker._openContextMenuTrigger = trigger;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ContextMenuTracker, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ContextMenuTracker, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ContextMenuTracker, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/**\n * A directive that opens a menu when a user right-clicks within its host element.\n * It is aware of nested context menus and will trigger only the lowest level non-disabled context menu.\n */\nclass CdkContextMenuTrigger extends CdkMenuTriggerBase {\n    /** Whether the context menu is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    constructor() {\n        super();\n        /** The CDK overlay service. */\n        this._overlay = inject(Overlay);\n        /** The directionality of the page. */\n        this._directionality = inject(Directionality, { optional: true });\n        /** The app's context menu tracking registry */\n        this._contextMenuTracker = inject(ContextMenuTracker);\n        this._disabled = false;\n        this._setMenuStackCloseListener();\n    }\n    /**\n     * Open the attached menu at the specified location.\n     * @param coordinates where to open the context menu\n     */\n    open(coordinates) {\n        this._open(coordinates, false);\n    }\n    /** Close the currently opened context menu. */\n    close() {\n        this.menuStack.closeAll();\n    }\n    /**\n     * Open the context menu and closes any previously open menus.\n     * @param event the mouse event which opens the context menu.\n     */\n    _openOnContextMenu(event) {\n        if (!this.disabled) {\n            // Prevent the native context menu from opening because we're opening a custom one.\n            event.preventDefault();\n            // Stop event propagation to ensure that only the closest enabled context menu opens.\n            // Otherwise, any context menus attached to containing elements would *also* open,\n            // resulting in multiple stacked context menus being displayed.\n            event.stopPropagation();\n            this._contextMenuTracker.update(this);\n            this._open({ x: event.clientX, y: event.clientY }, true);\n            // A context menu can be triggered via a mouse right click or a keyboard shortcut.\n            if (event.button === 2) {\n                this.childMenu?.focusFirstItem('mouse');\n            }\n            else if (event.button === 0) {\n                this.childMenu?.focusFirstItem('keyboard');\n            }\n            else {\n                this.childMenu?.focusFirstItem('program');\n            }\n        }\n    }\n    /**\n     * Get the configuration object used to create the overlay.\n     * @param coordinates the location to place the opened menu\n     */\n    _getOverlayConfig(coordinates) {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPositionStrategy(coordinates),\n            scrollStrategy: this._overlay.scrollStrategies.reposition(),\n            direction: this._directionality || undefined,\n        });\n    }\n    /**\n     * Get the position strategy for the overlay which specifies where to place the menu.\n     * @param coordinates the location to place the opened menu\n     */\n    _getOverlayPositionStrategy(coordinates) {\n        return this._overlay\n            .position()\n            .flexibleConnectedTo(coordinates)\n            .withLockedPosition()\n            .withGrowAfterOpen()\n            .withPositions(this.menuPosition ?? CONTEXT_MENU_POSITIONS);\n    }\n    /** Subscribe to the menu stack close events and close this menu when requested. */\n    _setMenuStackCloseListener() {\n        this.menuStack.closed.pipe(takeUntil(this.destroyed)).subscribe(({ item }) => {\n            if (item === this.childMenu && this.isOpen()) {\n                this.closed.next();\n                this.overlayRef.detach();\n            }\n        });\n    }\n    /**\n     * Subscribe to the overlays outside pointer events stream and handle closing out the stack if a\n     * click occurs outside the menus.\n     * @param ignoreFirstAuxClick Whether to ignore the first auxclick event outside the menu.\n     */\n    _subscribeToOutsideClicks(ignoreFirstAuxClick) {\n        if (this.overlayRef) {\n            let outsideClicks = this.overlayRef.outsidePointerEvents();\n            // If the menu was triggered by the `contextmenu` event, skip the first `auxclick` event\n            // because it fires when the mouse is released on the same click that opened the menu.\n            if (ignoreFirstAuxClick) {\n                const [auxClicks, nonAuxClicks] = partition(outsideClicks, ({ type }) => type === 'auxclick');\n                outsideClicks = merge(nonAuxClicks, auxClicks.pipe(skip(1)));\n            }\n            outsideClicks.pipe(takeUntil(this.stopOutsideClicksListener)).subscribe(event => {\n                if (!this.isElementInsideMenuStack(_getEventTarget(event))) {\n                    this.menuStack.closeAll();\n                }\n            });\n        }\n    }\n    /**\n     * Open the attached menu at the specified location.\n     * @param coordinates where to open the context menu\n     * @param ignoreFirstOutsideAuxClick Whether to ignore the first auxclick outside the menu after opening.\n     */\n    _open(coordinates, ignoreFirstOutsideAuxClick) {\n        if (this.disabled) {\n            return;\n        }\n        if (this.isOpen()) {\n            // since we're moving this menu we need to close any submenus first otherwise they end up\n            // disconnected from this one.\n            this.menuStack.closeSubMenuOf(this.childMenu);\n            this.overlayRef.getConfig().positionStrategy.setOrigin(coordinates);\n            this.overlayRef.updatePosition();\n        }\n        else {\n            this.opened.next();\n            if (this.overlayRef) {\n                this.overlayRef.getConfig().positionStrategy.setOrigin(coordinates);\n                this.overlayRef.updatePosition();\n            }\n            else {\n                this.overlayRef = this._overlay.create(this._getOverlayConfig(coordinates));\n            }\n            this.overlayRef.attach(this.getMenuContentPortal());\n            this._subscribeToOutsideClicks(ignoreFirstOutsideAuxClick);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkContextMenuTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkContextMenuTrigger, isStandalone: true, selector: \"[cdkContextMenuTriggerFor]\", inputs: { menuTemplateRef: [\"cdkContextMenuTriggerFor\", \"menuTemplateRef\"], menuPosition: [\"cdkContextMenuPosition\", \"menuPosition\"], menuData: [\"cdkContextMenuTriggerData\", \"menuData\"], disabled: [\"cdkContextMenuDisabled\", \"disabled\"] }, outputs: { opened: \"cdkContextMenuOpened\", closed: \"cdkContextMenuClosed\" }, host: { listeners: { \"contextmenu\": \"_openOnContextMenu($event)\" }, properties: { \"attr.data-cdk-menu-stack-id\": \"null\" } }, providers: [\n            { provide: MENU_TRIGGER, useExisting: CdkContextMenuTrigger },\n            { provide: MENU_STACK, useClass: MenuStack },\n        ], exportAs: [\"cdkContextMenuTriggerFor\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkContextMenuTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkContextMenuTriggerFor]',\n                    exportAs: 'cdkContextMenuTriggerFor',\n                    standalone: true,\n                    host: {\n                        '[attr.data-cdk-menu-stack-id]': 'null',\n                        '(contextmenu)': '_openOnContextMenu($event)',\n                    },\n                    inputs: [\n                        'menuTemplateRef: cdkContextMenuTriggerFor',\n                        'menuPosition: cdkContextMenuPosition',\n                        'menuData: cdkContextMenuTriggerData',\n                    ],\n                    outputs: ['opened: cdkContextMenuOpened', 'closed: cdkContextMenuClosed'],\n                    providers: [\n                        { provide: MENU_TRIGGER, useExisting: CdkContextMenuTrigger },\n                        { provide: MENU_STACK, useClass: MenuStack },\n                    ],\n                }]\n        }], ctorParameters: function () { return []; }, propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkContextMenuDisabled']\n            }] } });\n\nconst MENU_DIRECTIVES = [\n    CdkMenuBar,\n    CdkMenu,\n    CdkMenuItem,\n    CdkMenuItemRadio,\n    CdkMenuItemCheckbox,\n    CdkMenuTrigger,\n    CdkMenuGroup,\n    CdkContextMenuTrigger,\n    CdkTargetMenuAim,\n];\n/** Module that declares components and directives for the CDK menu. */\nclass CdkMenuModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuModule, imports: [OverlayModule, CdkMenuBar,\n            CdkMenu,\n            CdkMenuItem,\n            CdkMenuItemRadio,\n            CdkMenuItemCheckbox,\n            CdkMenuTrigger,\n            CdkMenuGroup,\n            CdkContextMenuTrigger,\n            CdkTargetMenuAim], exports: [CdkMenuBar,\n            CdkMenu,\n            CdkMenuItem,\n            CdkMenuItemRadio,\n            CdkMenuItemCheckbox,\n            CdkMenuTrigger,\n            CdkMenuGroup,\n            CdkContextMenuTrigger,\n            CdkTargetMenuAim] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuModule, imports: [OverlayModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, ...MENU_DIRECTIVES],\n                    exports: MENU_DIRECTIVES,\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_MENU, CdkContextMenuTrigger, CdkMenu, CdkMenuBar, CdkMenuBase, CdkMenuGroup, CdkMenuItem, CdkMenuItemCheckbox, CdkMenuItemRadio, CdkMenuItemSelectable, CdkMenuModule, CdkMenuTrigger, CdkMenuTriggerBase, CdkTargetMenuAim, ContextMenuTracker, MENU_AIM, MENU_STACK, MENU_TRIGGER, MenuStack, PARENT_OR_NEW_INLINE_MENU_STACK_PROVIDER, PARENT_OR_NEW_MENU_STACK_PROVIDER, PointerFocusTracker, TargetMenuAim };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}