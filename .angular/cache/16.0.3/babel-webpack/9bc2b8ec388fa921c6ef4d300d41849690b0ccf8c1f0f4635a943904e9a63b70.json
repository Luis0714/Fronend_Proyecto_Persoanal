{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(autorizationService, userService, formBuilder, router) {\n    this.autorizationService = autorizationService;\n    this.userService = userService;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.userCredentials = {\n      email: '',\n      password: ''\n    };\n    this.porfile = null;\n    this.loginForm = this.formBuilder.group({\n      email: ['luisandres@gmail.com', [Validators.required, Validators.email]],\n      password: ['Hola123*', Validators.required]\n    });\n  }\n  login() {\n    this.userCredentials.email = this.loginForm?.value.email;\n    this.userCredentials.password = this.loginForm?.value.password;\n    console.log(\"CREDENCIALES\", this.userCredentials);\n    this.autorizationService.login(this.userCredentials).subscribe(response => {\n      if (response.succeeded) {\n        this.router.navigate(['/dashboard']);\n      }\n    });\n  }\n  getProfile() {\n    this.autorizationService.getProfile().subscribe(response => {\n      this.porfile = response.data;\n    });\n  }\n  onLogin() {\n    if (this.loginForm?.invalid) {\n      return;\n    }\n    this.login();\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","Validators","LoginComponent","constructor","autorizationService","userService","formBuilder","router","userCredentials","email","password","porfile","loginForm","group","required","login","value","console","log","subscribe","response","succeeded","navigate","getProfile","data","onLogin","invalid","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Asus\\source\\repos\\Frontend_Proyect_Personal\\ESTREMOR\\src\\app\\components\\Pages\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { CredentialModel } from 'src/app/Models/Authenticated/CredentilsModel';\nimport { GetUserModel } from 'src/app/Models/Users/GetUserModel';\nimport { AutorizationService } from 'src/app/services/Authorization/autorization.service';\nimport { UserServiceService } from 'src/app/services/Users/user-service.service';\nimport { FormControl, Validators, FormGroup, FormBuilder, AbstractControl } from '@angular/forms';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent {\n  loginForm: FormGroup;\n  userCredentials: CredentialModel = { email: '', password: '' }\n  private porfile : GetUserModel | null = null;\n\n constructor(\n  private autorizationService: AutorizationService,\n  private userService: UserServiceService,\n  private formBuilder: FormBuilder,\n  private router: Router\n ){\n  this.loginForm = this.formBuilder.group({\n    email: ['luisandres@gmail.com', [Validators.required, Validators.email]],\n    password: ['Hola123*', Validators.required]\n  })\n }\n\n login() {\n  this.userCredentials.email = this.loginForm?.value.email;\n  this.userCredentials.password = this.loginForm?.value.password;\n  console.log(\"CREDENCIALES\",this.userCredentials)\n  this.autorizationService.login(this.userCredentials)\n    .subscribe(response => {\n      if(response.succeeded){\n        this.router.navigate(['/dashboard']);\n      }\n    })\n}\n\ngetProfile(){\n  this.autorizationService.getProfile()\n  .subscribe(response =>{\n    this.porfile = response.data;\n  });\n}\n\nonLogin(){\n  if (this.loginForm?.invalid) {\n    return;\n  }\n    this.login()\n}\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAKzC,SAAsBC,UAAU,QAAiD,gBAAgB;AAQjG,IAAaC,cAAc,GAA3B,MAAaA,cAAc;EAK1BC,YACSC,mBAAwC,EACxCC,WAA+B,EAC/BC,WAAwB,EACxBC,MAAc;IAHd,KAAAH,mBAAmB,GAAnBA,mBAAmB;IACnB,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IAPd,KAAAC,eAAe,GAAoB;MAAEC,KAAK,EAAE,EAAE;MAAEC,QAAQ,EAAE;IAAE,CAAE;IACtD,KAAAC,OAAO,GAAyB,IAAI;IAQ5C,IAAI,CAACC,SAAS,GAAG,IAAI,CAACN,WAAW,CAACO,KAAK,CAAC;MACtCJ,KAAK,EAAE,CAAC,sBAAsB,EAAE,CAACR,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACQ,KAAK,CAAC,CAAC;MACxEC,QAAQ,EAAE,CAAC,UAAU,EAAET,UAAU,CAACa,QAAQ;KAC3C,CAAC;EACH;EAEAC,KAAKA,CAAA;IACJ,IAAI,CAACP,eAAe,CAACC,KAAK,GAAG,IAAI,CAACG,SAAS,EAAEI,KAAK,CAACP,KAAK;IACxD,IAAI,CAACD,eAAe,CAACE,QAAQ,GAAG,IAAI,CAACE,SAAS,EAAEI,KAAK,CAACN,QAAQ;IAC9DO,OAAO,CAACC,GAAG,CAAC,cAAc,EAAC,IAAI,CAACV,eAAe,CAAC;IAChD,IAAI,CAACJ,mBAAmB,CAACW,KAAK,CAAC,IAAI,CAACP,eAAe,CAAC,CACjDW,SAAS,CAACC,QAAQ,IAAG;MACpB,IAAGA,QAAQ,CAACC,SAAS,EAAC;QACpB,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;;IAExC,CAAC,CAAC;EACN;EAEAC,UAAUA,CAAA;IACR,IAAI,CAACnB,mBAAmB,CAACmB,UAAU,EAAE,CACpCJ,SAAS,CAACC,QAAQ,IAAG;MACpB,IAAI,CAACT,OAAO,GAAGS,QAAQ,CAACI,IAAI;IAC9B,CAAC,CAAC;EACJ;EAEAC,OAAOA,CAAA;IACL,IAAI,IAAI,CAACb,SAAS,EAAEc,OAAO,EAAE;MAC3B;;IAEA,IAAI,CAACX,KAAK,EAAE;EAChB;CACC;AA1CYb,cAAc,GAAAyB,UAAA,EAL1B3B,SAAS,CAAC;EACT4B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACW5B,cAAc,CA0C1B;SA1CYA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}